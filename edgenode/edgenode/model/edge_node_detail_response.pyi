# coding: utf-8

"""
    Edgenode API

    Azion Orchestration  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from edgenode import schemas  # noqa: F401


class EdgeNodeDetailResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "groups",
            "has_services",
            "id",
            "modules",
            "hash_id",
        }
        
        class properties:
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NodeGroup']:
                        return NodeGroup
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['NodeGroup'], typing.List['NodeGroup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NodeGroup':
                    return super().__getitem__(i)
            has_services = schemas.BoolSchema
            hash_id = schemas.StrSchema
            id = schemas.Int64Schema
        
            @staticmethod
            def modules() -> typing.Type['EdgeNodeModules']:
                return EdgeNodeModules
            name = schemas.StrSchema
            __annotations__ = {
                "groups": groups,
                "has_services": has_services,
                "hash_id": hash_id,
                "id": id,
                "modules": modules,
                "name": name,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    name: MetaOapg.properties.name
    groups: MetaOapg.properties.groups
    has_services: MetaOapg.properties.has_services
    id: MetaOapg.properties.id
    modules: 'EdgeNodeModules'
    hash_id: MetaOapg.properties.hash_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_services"]) -> MetaOapg.properties.has_services: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modules"]) -> 'EdgeNodeModules': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hash_id"]) -> MetaOapg.properties.hash_id: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["groups"], typing_extensions.Literal["has_services"], typing_extensions.Literal["id"], typing_extensions.Literal["modules"], typing_extensions.Literal["hash_id"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_services"]) -> MetaOapg.properties.has_services: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modules"]) -> 'EdgeNodeModules': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hash_id"]) -> MetaOapg.properties.hash_id: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["groups"], typing_extensions.Literal["has_services"], typing_extensions.Literal["id"], typing_extensions.Literal["modules"], typing_extensions.Literal["hash_id"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, ],
        has_services: typing.Union[MetaOapg.properties.has_services, bool, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        modules: 'EdgeNodeModules',
        hash_id: typing.Union[MetaOapg.properties.hash_id, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'EdgeNodeDetailResponse':
        return super().__new__(
            cls,
            *_args,
            name=name,
            groups=groups,
            has_services=has_services,
            id=id,
            modules=modules,
            hash_id=hash_id,
            _configuration=_configuration,
        )

from edgenode.model.edge_node_modules import EdgeNodeModules
from edgenode.model.node_group import NodeGroup
