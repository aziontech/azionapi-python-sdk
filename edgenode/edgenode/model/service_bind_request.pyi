# coding: utf-8

"""
    Edge Node API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from edgenode import schemas  # noqa: F401


class ServiceBindRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "variables",
            "service_id",
        }
        
        class properties:
            service_id = schemas.Int64Schema
            
            
            class variables(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Variable']:
                        return Variable
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Variable'], typing.List['Variable']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'variables':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Variable':
                    return super().__getitem__(i)
            __annotations__ = {
                "service_id": service_id,
                "variables": variables,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    variables: MetaOapg.properties.variables
    service_id: MetaOapg.properties.service_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variables"]) -> MetaOapg.properties.variables: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_id"]) -> MetaOapg.properties.service_id: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["variables"], typing_extensions.Literal["service_id"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variables"]) -> MetaOapg.properties.variables: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_id"]) -> MetaOapg.properties.service_id: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["variables"], typing_extensions.Literal["service_id"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        variables: typing.Union[MetaOapg.properties.variables, list, tuple, ],
        service_id: typing.Union[MetaOapg.properties.service_id, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ServiceBindRequest':
        return super().__new__(
            cls,
            *_args,
            variables=variables,
            service_id=service_id,
            _configuration=_configuration,
        )

from edgenode.model.variable import Variable
