# coding: utf-8

"""
    Services API

    Azion Services  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from services import schemas  # noqa: F401


class ServiceResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "updated_at",
            "permissions",
            "last_editor",
            "name",
            "active",
            "bound_nodes",
            "id",
        }
        
        class properties:
            active = schemas.BoolSchema
            bound_nodes = schemas.Int64Schema
            id = schemas.Int64Schema
            last_editor = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class permissions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'permissions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            updated_at = schemas.StrSchema
            
            
            class variables(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Variable']:
                        return Variable
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Variable'], typing.List['Variable']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'variables':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Variable':
                    return super().__getitem__(i)
            __annotations__ = {
                "active": active,
                "bound_nodes": bound_nodes,
                "id": id,
                "last_editor": last_editor,
                "name": name,
                "permissions": permissions,
                "updated_at": updated_at,
                "variables": variables,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    updated_at: MetaOapg.properties.updated_at
    permissions: MetaOapg.properties.permissions
    last_editor: MetaOapg.properties.last_editor
    name: MetaOapg.properties.name
    active: MetaOapg.properties.active
    bound_nodes: MetaOapg.properties.bound_nodes
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_editor"]) -> MetaOapg.properties.last_editor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bound_nodes"]) -> MetaOapg.properties.bound_nodes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["variables"]) -> MetaOapg.properties.variables: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["updated_at"], typing_extensions.Literal["permissions"], typing_extensions.Literal["last_editor"], typing_extensions.Literal["name"], typing_extensions.Literal["active"], typing_extensions.Literal["bound_nodes"], typing_extensions.Literal["id"], typing_extensions.Literal["variables"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_editor"]) -> MetaOapg.properties.last_editor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bound_nodes"]) -> MetaOapg.properties.bound_nodes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["variables"]) -> typing.Union[MetaOapg.properties.variables, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["updated_at"], typing_extensions.Literal["permissions"], typing_extensions.Literal["last_editor"], typing_extensions.Literal["name"], typing_extensions.Literal["active"], typing_extensions.Literal["bound_nodes"], typing_extensions.Literal["id"], typing_extensions.Literal["variables"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        permissions: typing.Union[MetaOapg.properties.permissions, list, tuple, ],
        last_editor: typing.Union[MetaOapg.properties.last_editor, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        bound_nodes: typing.Union[MetaOapg.properties.bound_nodes, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        variables: typing.Union[MetaOapg.properties.variables, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ServiceResponse':
        return super().__new__(
            cls,
            *_args,
            updated_at=updated_at,
            permissions=permissions,
            last_editor=last_editor,
            name=name,
            active=active,
            bound_nodes=bound_nodes,
            id=id,
            variables=variables,
            _configuration=_configuration,
        )

from services.model.variable import Variable
