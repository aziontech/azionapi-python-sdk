# coding: utf-8

"""
    Variables API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictStr, constr

class Variable(BaseModel):
    """
    Variable
    """
    uuid: StrictStr = Field(...)
    key: constr(strict=True, max_length=100, min_length=1) = Field(...)
    value: constr(strict=True, max_length=32768, min_length=1) = Field(...)
    secret: StrictBool = Field(...)
    last_editor: StrictStr = Field(...)
    created_at: datetime = Field(...)
    updated_at: datetime = Field(...)
    __properties = ["uuid", "key", "value", "secret", "last_editor", "created_at", "updated_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Variable:
        """Create an instance of Variable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "uuid",
                            "secret",
                            "last_editor",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Variable:
        """Create an instance of Variable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Variable.parse_obj(obj)

        _obj = Variable.parse_obj({
            "uuid": obj.get("uuid"),
            "key": obj.get("key"),
            "value": obj.get("value"),
            "secret": obj.get("secret"),
            "last_editor": obj.get("last_editor"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


