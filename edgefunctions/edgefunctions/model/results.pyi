# coding: utf-8

"""
    Edge Function API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from edgefunctions import schemas  # noqa: F401


class Results(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.Int64Schema
            name = schemas.StrSchema
            language = schemas.StrSchema
            code = schemas.StrSchema
            json_args = schemas.AnyTypeSchema
            function_to_run = schemas.StrSchema
            initiator_type = schemas.StrSchema
            active = schemas.BoolSchema
            last_editor = schemas.StrSchema
            modified = schemas.StrSchema
            reference_count = schemas.Int64Schema
            is_proprietary_code = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "language": language,
                "code": code,
                "json_args": json_args,
                "function_to_run": function_to_run,
                "initiator_type": initiator_type,
                "active": active,
                "last_editor": last_editor,
                "modified": modified,
                "reference_count": reference_count,
                "is_proprietary_code": is_proprietary_code,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["json_args"]) -> MetaOapg.properties.json_args: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["function_to_run"]) -> MetaOapg.properties.function_to_run: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initiator_type"]) -> MetaOapg.properties.initiator_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_editor"]) -> MetaOapg.properties.last_editor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified"]) -> MetaOapg.properties.modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_count"]) -> MetaOapg.properties.reference_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_proprietary_code"]) -> MetaOapg.properties.is_proprietary_code: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "language", "code", "json_args", "function_to_run", "initiator_type", "active", "last_editor", "modified", "reference_count", "is_proprietary_code", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> typing.Union[MetaOapg.properties.language, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["json_args"]) -> typing.Union[MetaOapg.properties.json_args, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["function_to_run"]) -> typing.Union[MetaOapg.properties.function_to_run, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initiator_type"]) -> typing.Union[MetaOapg.properties.initiator_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_editor"]) -> typing.Union[MetaOapg.properties.last_editor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified"]) -> typing.Union[MetaOapg.properties.modified, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_count"]) -> typing.Union[MetaOapg.properties.reference_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_proprietary_code"]) -> typing.Union[MetaOapg.properties.is_proprietary_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "language", "code", "json_args", "function_to_run", "initiator_type", "active", "last_editor", "modified", "reference_count", "is_proprietary_code", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        language: typing.Union[MetaOapg.properties.language, str, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        json_args: typing.Union[MetaOapg.properties.json_args, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        function_to_run: typing.Union[MetaOapg.properties.function_to_run, str, schemas.Unset] = schemas.unset,
        initiator_type: typing.Union[MetaOapg.properties.initiator_type, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        last_editor: typing.Union[MetaOapg.properties.last_editor, str, schemas.Unset] = schemas.unset,
        modified: typing.Union[MetaOapg.properties.modified, str, schemas.Unset] = schemas.unset,
        reference_count: typing.Union[MetaOapg.properties.reference_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        is_proprietary_code: typing.Union[MetaOapg.properties.is_proprietary_code, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Results':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            language=language,
            code=code,
            json_args=json_args,
            function_to_run=function_to_run,
            initiator_type=initiator_type,
            active=active,
            last_editor=last_editor,
            modified=modified,
            reference_count=reference_count,
            is_proprietary_code=is_proprietary_code,
            _configuration=_configuration,
            **kwargs,
        )
