# coding: utf-8

"""
    Edge Function API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateEdgeFunctionRequest(BaseModel):
    """
    CreateEdgeFunctionRequest
    """ # noqa: E501
    name: Optional[StrictStr] = None
    language: Optional[StrictStr] = None
    code: Optional[StrictStr] = None
    json_args: Optional[Any] = None
    initiator_type: Optional[StrictStr] = None
    active: Optional[StrictBool] = None
    is_proprietary_code: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["name", "language", "code", "json_args", "initiator_type", "active", "is_proprietary_code"]

    @field_validator('initiator_type')
    def initiator_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['edge_application', 'edge_firewall']):
            raise ValueError("must be one of enum values ('edge_application', 'edge_firewall')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateEdgeFunctionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if json_args (nullable) is None
        # and model_fields_set contains the field
        if self.json_args is None and "json_args" in self.model_fields_set:
            _dict['json_args'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateEdgeFunctionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "language": obj.get("language"),
            "code": obj.get("code"),
            "json_args": obj.get("json_args"),
            "initiator_type": obj.get("initiator_type"),
            "active": obj.get("active"),
            "is_proprietary_code": obj.get("is_proprietary_code")
        })
        return _obj


