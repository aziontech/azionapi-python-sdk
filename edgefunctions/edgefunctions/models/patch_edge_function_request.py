# coding: utf-8

"""
    Edge Function API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, StrictBool, StrictStr

class PatchEdgeFunctionRequest(BaseModel):
    """
    PatchEdgeFunctionRequest
    """
    name: Optional[StrictStr] = None
    code: Optional[StrictStr] = None
    json_args: Optional[Any] = None
    active: Optional[StrictBool] = None
    is_proprietary_code: Optional[StrictBool] = None
    __properties = ["name", "code", "json_args", "active", "is_proprietary_code"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchEdgeFunctionRequest:
        """Create an instance of PatchEdgeFunctionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if json_args (nullable) is None
        # and __fields_set__ contains the field
        if self.json_args is None and "json_args" in self.__fields_set__:
            _dict['json_args'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchEdgeFunctionRequest:
        """Create an instance of PatchEdgeFunctionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchEdgeFunctionRequest.parse_obj(obj)

        _obj = PatchEdgeFunctionRequest.parse_obj({
            "name": obj.get("name"),
            "code": obj.get("code"),
            "json_args": obj.get("json_args"),
            "active": obj.get("active"),
            "is_proprietary_code": obj.get("is_proprietary_code")
        })
        return _obj


