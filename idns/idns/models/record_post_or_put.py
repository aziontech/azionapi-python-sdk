# coding: utf-8

"""
    Intelligent DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist

class RecordPostOrPut(BaseModel):
    """
    RecordPostOrPut
    """
    id: Optional[StrictInt] = None
    entry: Optional[StrictStr] = None
    description: Optional[StrictStr] = None
    answers_list: Optional[conlist(StrictStr)] = None
    policy: Optional[StrictStr] = None
    weight: Optional[StrictInt] = None
    record_type: Optional[StrictStr] = None
    ttl: Optional[StrictInt] = None
    __properties = ["id", "entry", "description", "answers_list", "policy", "weight", "record_type", "ttl"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecordPostOrPut:
        """Create an instance of RecordPostOrPut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecordPostOrPut:
        """Create an instance of RecordPostOrPut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecordPostOrPut.parse_obj(obj)

        _obj = RecordPostOrPut.parse_obj({
            "id": obj.get("id"),
            "entry": obj.get("entry"),
            "description": obj.get("description"),
            "answers_list": obj.get("answers_list"),
            "policy": obj.get("policy"),
            "weight": obj.get("weight"),
            "record_type": obj.get("record_type"),
            "ttl": obj.get("ttl")
        })
        return _obj


