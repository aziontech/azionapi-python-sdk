# coding: utf-8

"""
    Intelligent DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, conint
from idns.models.dns_sec_delegation_signer_digest_type import DnsSecDelegationSignerDigestType

class DnsSecDelegationSigner(BaseModel):
    """
    DnsSecDelegationSigner
    """
    digest_type: Optional[DnsSecDelegationSignerDigestType] = None
    algorithm_type: Optional[DnsSecDelegationSignerDigestType] = None
    digest: Optional[StrictStr] = None
    key_tag: Optional[conint(strict=True, le=65535, ge=1)] = None
    __properties = ["digest_type", "algorithm_type", "digest", "key_tag"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DnsSecDelegationSigner:
        """Create an instance of DnsSecDelegationSigner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of digest_type
        if self.digest_type:
            _dict['digest_type'] = self.digest_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of algorithm_type
        if self.algorithm_type:
            _dict['algorithm_type'] = self.algorithm_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DnsSecDelegationSigner:
        """Create an instance of DnsSecDelegationSigner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DnsSecDelegationSigner.parse_obj(obj)

        _obj = DnsSecDelegationSigner.parse_obj({
            "digest_type": DnsSecDelegationSignerDigestType.from_dict(obj.get("digest_type")) if obj.get("digest_type") is not None else None,
            "algorithm_type": DnsSecDelegationSignerDigestType.from_dict(obj.get("algorithm_type")) if obj.get("algorithm_type") is not None else None,
            "digest": obj.get("digest"),
            "key_tag": obj.get("key_tag")
        })
        return _obj


