# coding: utf-8

"""
    Intelligent DNS API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

class Zone(BaseModel):
    """
    Zone
    """
    id: Optional[StrictInt] = Field(None, description="Hosted zone id")
    name: Optional[StrictStr] = Field(None, description="Hosted zone name")
    domain: Optional[StrictStr] = Field(None, description="Hosted zone domain")
    is_active: Optional[StrictBool] = Field(None, description="If hosted zone is active")
    retry: Optional[StrictInt] = None
    nx_ttl: Optional[StrictInt] = None
    soa_ttl: Optional[StrictInt] = None
    refresh: Optional[StrictInt] = None
    expiry: Optional[StrictInt] = None
    nameservers: Optional[conlist(StrictStr)] = Field(None, description="List of nameservers")
    __properties = ["id", "name", "domain", "is_active", "retry", "nx_ttl", "soa_ttl", "refresh", "expiry", "nameservers"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Zone:
        """Create an instance of Zone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if retry (nullable) is None
        # and __fields_set__ contains the field
        if self.retry is None and "retry" in self.__fields_set__:
            _dict['retry'] = None

        # set to None if nx_ttl (nullable) is None
        # and __fields_set__ contains the field
        if self.nx_ttl is None and "nx_ttl" in self.__fields_set__:
            _dict['nx_ttl'] = None

        # set to None if soa_ttl (nullable) is None
        # and __fields_set__ contains the field
        if self.soa_ttl is None and "soa_ttl" in self.__fields_set__:
            _dict['soa_ttl'] = None

        # set to None if refresh (nullable) is None
        # and __fields_set__ contains the field
        if self.refresh is None and "refresh" in self.__fields_set__:
            _dict['refresh'] = None

        # set to None if expiry (nullable) is None
        # and __fields_set__ contains the field
        if self.expiry is None and "expiry" in self.__fields_set__:
            _dict['expiry'] = None

        # set to None if nameservers (nullable) is None
        # and __fields_set__ contains the field
        if self.nameservers is None and "nameservers" in self.__fields_set__:
            _dict['nameservers'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Zone:
        """Create an instance of Zone from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Zone.parse_obj(obj)

        _obj = Zone.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "domain": obj.get("domain"),
            "is_active": obj.get("is_active"),
            "retry": obj.get("retry"),
            "nx_ttl": obj.get("nx_ttl"),
            "soa_ttl": obj.get("soa_ttl"),
            "refresh": obj.get("refresh"),
            "expiry": obj.get("expiry"),
            "nameservers": obj.get("nameservers")
        })
        return _obj


