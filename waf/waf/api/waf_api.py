# coding: utf-8

"""
    Web Application Firewall API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from waf.models.create_new_waf_ruleset_request import CreateNewWAFRulesetRequest
from waf.models.single_waf import SingleWAF
from waf.models.waf_domains200 import WAFDomains200
from waf.models.waf_events200 import WAFEvents200
from waf.models.waf_list200 import WAFList200
from waf.models.waf_single200 import WAFSingle200

from waf.api_client import ApiClient
from waf.api_response import ApiResponse
from waf.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WAFApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_new_waf_ruleset(self, create_new_waf_ruleset_request : Optional[CreateNewWAFRulesetRequest] = None, **kwargs) -> SingleWAF:  # noqa: E501
        """Create a new WAF Rule Set in an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_new_waf_ruleset(create_new_waf_ruleset_request, async_req=True)
        >>> result = thread.get()

        :param create_new_waf_ruleset_request:
        :type create_new_waf_ruleset_request: CreateNewWAFRulesetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWAF
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_new_waf_ruleset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_new_waf_ruleset_with_http_info(create_new_waf_ruleset_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_new_waf_ruleset_with_http_info(self, create_new_waf_ruleset_request : Optional[CreateNewWAFRulesetRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create a new WAF Rule Set in an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_new_waf_ruleset_with_http_info(create_new_waf_ruleset_request, async_req=True)
        >>> result = thread.get()

        :param create_new_waf_ruleset_request:
        :type create_new_waf_ruleset_request: CreateNewWAFRulesetRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWAF, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'create_new_waf_ruleset_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_waf_ruleset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_new_waf_ruleset_request'] is not None:
            _body_params = _params['create_new_waf_ruleset_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json; version=3']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "SingleWAF",
            '201': "SingleWAF",
            '400': None,
            '403': None,
            '404': None,
            '415': None,
            '422': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/waf/rulesets', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_waf_ruleset(self, waf_rule_set_id : StrictStr, **kwargs) -> None:  # noqa: E501
        """Remove an WAF Rule Set from an account. Warning: this action cannot be undone.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_waf_ruleset(waf_rule_set_id, async_req=True)
        >>> result = thread.get()

        :param waf_rule_set_id: (required)
        :type waf_rule_set_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_waf_ruleset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_waf_ruleset_with_http_info(waf_rule_set_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_waf_ruleset_with_http_info(self, waf_rule_set_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """Remove an WAF Rule Set from an account. Warning: this action cannot be undone.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_waf_ruleset_with_http_info(waf_rule_set_id, async_req=True)
        >>> result = thread.get()

        :param waf_rule_set_id: (required)
        :type waf_rule_set_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'waf_rule_set_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_waf_ruleset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['waf_rule_set_id']:
            _path_params['waf_rule_set_id'] = _params['waf_rule_set_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/waf/rulesets/{waf_rule_set_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_waf_domains(self, waf_id : Annotated[StrictInt, Field(..., description="ID of WAF to return")], name : Annotated[Optional[StrictStr], Field(description="searches WAF for name")] = None, **kwargs) -> WAFDomains200:  # noqa: E501
        """List all domains attached to a Web Application Firewall (WAF) in an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_waf_domains(waf_id, name, async_req=True)
        >>> result = thread.get()

        :param waf_id: ID of WAF to return (required)
        :type waf_id: int
        :param name: searches WAF for name
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WAFDomains200
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_waf_domains_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_waf_domains_with_http_info(waf_id, name, **kwargs)  # noqa: E501

    @validate_arguments
    def get_waf_domains_with_http_info(self, waf_id : Annotated[StrictInt, Field(..., description="ID of WAF to return")], name : Annotated[Optional[StrictStr], Field(description="searches WAF for name")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List all domains attached to a Web Application Firewall (WAF) in an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_waf_domains_with_http_info(waf_id, name, async_req=True)
        >>> result = thread.get()

        :param waf_id: ID of WAF to return (required)
        :type waf_id: int
        :param name: searches WAF for name
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WAFDomains200, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'waf_id',
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_waf_domains" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['waf_id']:
            _path_params['waf_id'] = _params['waf_id']


        # process the query parameters
        _query_params = []
        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "WAFDomains200",
            '400': "WAFEvents400",
            '404': "WAFEvents404",
        }

        return self.api_client.call_api(
            '/waf/{waf_id}/domains', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_waf_events(self, waf_id : Annotated[StrictInt, Field(..., description="ID of WAF to return")], hour_range : Annotated[StrictInt, Field(..., description="Last log hours since now (it must be a integer number ranging between 1 and 72)")], domains_ids : Annotated[StrictStr, Field(..., description="Multiple domain's id (they must be separated by comma like 1233,1234)")], network_list_id : Annotated[Optional[StrictInt], Field(description="Id of a network list")] = None, sort : Optional[StrictStr] = None, page : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, **kwargs) -> WAFEvents200:  # noqa: E501
        """Find WAF log events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_waf_events(waf_id, hour_range, domains_ids, network_list_id, sort, page, page_size, async_req=True)
        >>> result = thread.get()

        :param waf_id: ID of WAF to return (required)
        :type waf_id: int
        :param hour_range: Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
        :type hour_range: int
        :param domains_ids: Multiple domain's id (they must be separated by comma like 1233,1234) (required)
        :type domains_ids: str
        :param network_list_id: Id of a network list
        :type network_list_id: int
        :param sort:
        :type sort: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WAFEvents200
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_waf_events_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_waf_events_with_http_info(waf_id, hour_range, domains_ids, network_list_id, sort, page, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def get_waf_events_with_http_info(self, waf_id : Annotated[StrictInt, Field(..., description="ID of WAF to return")], hour_range : Annotated[StrictInt, Field(..., description="Last log hours since now (it must be a integer number ranging between 1 and 72)")], domains_ids : Annotated[StrictStr, Field(..., description="Multiple domain's id (they must be separated by comma like 1233,1234)")], network_list_id : Annotated[Optional[StrictInt], Field(description="Id of a network list")] = None, sort : Optional[StrictStr] = None, page : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Find WAF log events  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_waf_events_with_http_info(waf_id, hour_range, domains_ids, network_list_id, sort, page, page_size, async_req=True)
        >>> result = thread.get()

        :param waf_id: ID of WAF to return (required)
        :type waf_id: int
        :param hour_range: Last log hours since now (it must be a integer number ranging between 1 and 72) (required)
        :type hour_range: int
        :param domains_ids: Multiple domain's id (they must be separated by comma like 1233,1234) (required)
        :type domains_ids: str
        :param network_list_id: Id of a network list
        :type network_list_id: int
        :param sort:
        :type sort: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WAFEvents200, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'waf_id',
            'hour_range',
            'domains_ids',
            'network_list_id',
            'sort',
            'page',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_waf_events" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['waf_id']:
            _path_params['waf_id'] = _params['waf_id']


        # process the query parameters
        _query_params = []
        if _params.get('hour_range') is not None:  # noqa: E501
            _query_params.append(('hour_range', _params['hour_range']))

        if _params.get('network_list_id') is not None:  # noqa: E501
            _query_params.append(('network_list_id', _params['network_list_id']))

        if _params.get('domains_ids') is not None:  # noqa: E501
            _query_params.append(('domains_ids', _params['domains_ids']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "WAFEvents200",
            '400': "WAFEvents400",
            '401': "WAFEvents401",
            '404': "WAFEvents404",
            '500': None,
        }

        return self.api_client.call_api(
            '/waf/{waf_id}/waf_events', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_waf_ruleset(self, waf_rule_set_id : Annotated[StrictInt, Field(..., description="ID of WAF Ruleset to return")], **kwargs) -> WAFSingle200:  # noqa: E501
        """List a specific Rule Set associated to a Web Application Firewall (WAF) in an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_waf_ruleset(waf_rule_set_id, async_req=True)
        >>> result = thread.get()

        :param waf_rule_set_id: ID of WAF Ruleset to return (required)
        :type waf_rule_set_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WAFSingle200
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_waf_ruleset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_waf_ruleset_with_http_info(waf_rule_set_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_waf_ruleset_with_http_info(self, waf_rule_set_id : Annotated[StrictInt, Field(..., description="ID of WAF Ruleset to return")], **kwargs) -> ApiResponse:  # noqa: E501
        """List a specific Rule Set associated to a Web Application Firewall (WAF) in an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_waf_ruleset_with_http_info(waf_rule_set_id, async_req=True)
        >>> result = thread.get()

        :param waf_rule_set_id: ID of WAF Ruleset to return (required)
        :type waf_rule_set_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WAFSingle200, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'waf_rule_set_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_waf_ruleset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['waf_rule_set_id']:
            _path_params['waf_rule_set_id'] = _params['waf_rule_set_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "WAFSingle200",
            '400': "WAFEvents400",
            '404': "WAFEvents404",
        }

        return self.api_client.call_api(
            '/waf/rulesets/{waf_rule_set_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_all_waf(self, page : Annotated[Optional[StrictInt], Field(description="Identifies which page should be returned, if the return is paginated.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Identifies how many items should be returned per page.")] = None, **kwargs) -> WAFList200:  # noqa: E501
        """List all Web Application Firewalls (WAFs) created in an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_all_waf(page, page_size, async_req=True)
        >>> result = thread.get()

        :param page: Identifies which page should be returned, if the return is paginated.
        :type page: int
        :param page_size: Identifies how many items should be returned per page.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WAFList200
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_all_waf_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_all_waf_with_http_info(page, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def list_all_waf_with_http_info(self, page : Annotated[Optional[StrictInt], Field(description="Identifies which page should be returned, if the return is paginated.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Identifies how many items should be returned per page.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List all Web Application Firewalls (WAFs) created in an account  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_all_waf_with_http_info(page, page_size, async_req=True)
        >>> result = thread.get()

        :param page: Identifies which page should be returned, if the return is paginated.
        :type page: int
        :param page_size: Identifies how many items should be returned per page.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WAFList200, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'page',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_waf" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "WAFList200",
            '400': "WAFEvents400",
            '404': "WAFEvents404",
        }

        return self.api_client.call_api(
            '/waf', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_all_waf_rulesets(self, order_by : Annotated[Optional[StrictStr], Field(description="Identifies which property the return should be sorted by.")] = None, sort : Annotated[Optional[StrictStr], Field(description="Defines whether objects are shown in ascending or descending order depending on the value set in order_by.")] = None, page : Annotated[Optional[StrictInt], Field(description="Identifies which page should be returned, if the return is paginated.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Identifies how many items should be returned per page.")] = None, **kwargs) -> WAFList200:  # noqa: E501
        """list all Rule Sets associated to a Web Application Firewall (WAF) in an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_all_waf_rulesets(order_by, sort, page, page_size, async_req=True)
        >>> result = thread.get()

        :param order_by: Identifies which property the return should be sorted by.
        :type order_by: str
        :param sort: Defines whether objects are shown in ascending or descending order depending on the value set in order_by.
        :type sort: str
        :param page: Identifies which page should be returned, if the return is paginated.
        :type page: int
        :param page_size: Identifies how many items should be returned per page.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WAFList200
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_all_waf_rulesets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_all_waf_rulesets_with_http_info(order_by, sort, page, page_size, **kwargs)  # noqa: E501

    @validate_arguments
    def list_all_waf_rulesets_with_http_info(self, order_by : Annotated[Optional[StrictStr], Field(description="Identifies which property the return should be sorted by.")] = None, sort : Annotated[Optional[StrictStr], Field(description="Defines whether objects are shown in ascending or descending order depending on the value set in order_by.")] = None, page : Annotated[Optional[StrictInt], Field(description="Identifies which page should be returned, if the return is paginated.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Identifies how many items should be returned per page.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """list all Rule Sets associated to a Web Application Firewall (WAF) in an account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_all_waf_rulesets_with_http_info(order_by, sort, page, page_size, async_req=True)
        >>> result = thread.get()

        :param order_by: Identifies which property the return should be sorted by.
        :type order_by: str
        :param sort: Defines whether objects are shown in ascending or descending order depending on the value set in order_by.
        :type sort: str
        :param page: Identifies which page should be returned, if the return is paginated.
        :type page: int
        :param page_size: Identifies how many items should be returned per page.
        :type page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WAFList200, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'order_by',
            'sort',
            'page',
            'page_size'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_waf_rulesets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('order_by', _params['order_by']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "WAFList200",
            '400': "WAFEvents400",
            '404': "WAFEvents404",
        }

        return self.api_client.call_api(
            '/waf/rulesets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_waf_ruleset(self, waf_rule_set_id : StrictStr, single_waf : Optional[SingleWAF] = None, **kwargs) -> SingleWAF:  # noqa: E501
        """Change only select settings of a WAF Rule Set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_waf_ruleset(waf_rule_set_id, single_waf, async_req=True)
        >>> result = thread.get()

        :param waf_rule_set_id: (required)
        :type waf_rule_set_id: str
        :param single_waf:
        :type single_waf: SingleWAF
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SingleWAF
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_waf_ruleset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_waf_ruleset_with_http_info(waf_rule_set_id, single_waf, **kwargs)  # noqa: E501

    @validate_arguments
    def update_waf_ruleset_with_http_info(self, waf_rule_set_id : StrictStr, single_waf : Optional[SingleWAF] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Change only select settings of a WAF Rule Set  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_waf_ruleset_with_http_info(waf_rule_set_id, single_waf, async_req=True)
        >>> result = thread.get()

        :param waf_rule_set_id: (required)
        :type waf_rule_set_id: str
        :param single_waf:
        :type single_waf: SingleWAF
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SingleWAF, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'waf_rule_set_id',
            'single_waf'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_waf_ruleset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['waf_rule_set_id']:
            _path_params['waf_rule_set_id'] = _params['waf_rule_set_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['single_waf'] is not None:
            _body_params = _params['single_waf']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json; version=3']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "SingleWAF",
            '400': None,
            '403': None,
            '404': None,
            '405': None,
            '422': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/waf/rulesets/{waf_rule_set_id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
