# coding: utf-8

"""
    Web Application Firewall API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from waf.models.waf_sensitivity_choices import WAFSensitivityChoices

class CreateNewWAFRulesetRequest(BaseModel):
    """
    CreateNewWAFRulesetRequest
    """
    id: Optional[StrictInt] = None
    name: StrictStr = Field(..., description="Identification name for WAF Rule Set.")
    mode: StrictStr = Field(...)
    active: StrictBool = Field(...)
    sql_injection: StrictBool = Field(...)
    sql_injection_sensitivity: WAFSensitivityChoices = Field(...)
    remote_file_inclusion: StrictBool = Field(...)
    remote_file_inclusion_sensitivity: WAFSensitivityChoices = Field(...)
    directory_traversal: StrictBool = Field(...)
    directory_traversal_sensitivity: WAFSensitivityChoices = Field(...)
    cross_site_scripting: StrictBool = Field(...)
    cross_site_scripting_sensitivity: WAFSensitivityChoices = Field(...)
    evading_tricks: StrictBool = Field(...)
    evading_tricks_sensitivity: WAFSensitivityChoices = Field(...)
    file_upload: StrictBool = Field(...)
    file_upload_sensitivity: WAFSensitivityChoices = Field(...)
    unwanted_access: StrictBool = Field(...)
    unwanted_access_sensitivity: WAFSensitivityChoices = Field(...)
    identified_attack: StrictBool = Field(...)
    identified_attack_sensitivity: WAFSensitivityChoices = Field(...)
    bypass_addresses: conlist(StrictStr) = Field(...)
    __properties = ["id", "name", "mode", "active", "sql_injection", "sql_injection_sensitivity", "remote_file_inclusion", "remote_file_inclusion_sensitivity", "directory_traversal", "directory_traversal_sensitivity", "cross_site_scripting", "cross_site_scripting_sensitivity", "evading_tricks", "evading_tricks_sensitivity", "file_upload", "file_upload_sensitivity", "unwanted_access", "unwanted_access_sensitivity", "identified_attack", "identified_attack_sensitivity", "bypass_addresses"]

    @validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('blocking', 'counting'):
            raise ValueError("must be one of enum values ('blocking', 'counting')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateNewWAFRulesetRequest:
        """Create an instance of CreateNewWAFRulesetRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateNewWAFRulesetRequest:
        """Create an instance of CreateNewWAFRulesetRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateNewWAFRulesetRequest.parse_obj(obj)

        _obj = CreateNewWAFRulesetRequest.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "mode": obj.get("mode"),
            "active": obj.get("active"),
            "sql_injection": obj.get("sql_injection"),
            "sql_injection_sensitivity": obj.get("sql_injection_sensitivity"),
            "remote_file_inclusion": obj.get("remote_file_inclusion"),
            "remote_file_inclusion_sensitivity": obj.get("remote_file_inclusion_sensitivity"),
            "directory_traversal": obj.get("directory_traversal"),
            "directory_traversal_sensitivity": obj.get("directory_traversal_sensitivity"),
            "cross_site_scripting": obj.get("cross_site_scripting"),
            "cross_site_scripting_sensitivity": obj.get("cross_site_scripting_sensitivity"),
            "evading_tricks": obj.get("evading_tricks"),
            "evading_tricks_sensitivity": obj.get("evading_tricks_sensitivity"),
            "file_upload": obj.get("file_upload"),
            "file_upload_sensitivity": obj.get("file_upload_sensitivity"),
            "unwanted_access": obj.get("unwanted_access"),
            "unwanted_access_sensitivity": obj.get("unwanted_access_sensitivity"),
            "identified_attack": obj.get("identified_attack"),
            "identified_attack_sensitivity": obj.get("identified_attack_sensitivity"),
            "bypass_addresses": obj.get("bypass_addresses")
        })
        return _obj


