# coding: utf-8

"""
    Web Application Firewall API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, StrictStr, conlist, validator
from waf.models.waf_events200_results_inner_top10_countries_inner import WAFEvents200ResultsInnerTop10CountriesInner

class WAFEvents200ResultsInner(BaseModel):
    """
    WAFEvents200ResultsInner
    """
    country_count: Optional[StrictInt] = None
    top_10_countries: Optional[conlist(WAFEvents200ResultsInnerTop10CountriesInner)] = None
    top_10_ips: Optional[conlist(WAFEvents200ResultsInnerTop10CountriesInner)] = None
    hit_count: Optional[StrictInt] = None
    rule_id: Optional[StrictInt] = None
    ip_count: Optional[StrictInt] = None
    match_zone: Optional[StrictStr] = None
    path_count: Optional[StrictInt] = None
    matches_on: Optional[StrictStr] = None
    rule_description: Optional[StrictStr] = None
    __properties = ["country_count", "top_10_countries", "top_10_ips", "hit_count", "rule_id", "ip_count", "match_zone", "path_count", "matches_on", "rule_description"]

    @validator('match_zone')
    def match_zone_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('path', 'query_string', 'request_header', 'request_body', 'raw_body', 'file_name', 'cookie'):
            raise ValueError("must be one of enum values ('path', 'query_string', 'request_header', 'request_body', 'raw_body', 'file_name', 'cookie')")
        return value

    @validator('matches_on')
    def matches_on_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('name', 'value'):
            raise ValueError("must be one of enum values ('name', 'value')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WAFEvents200ResultsInner:
        """Create an instance of WAFEvents200ResultsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in top_10_countries (list)
        _items = []
        if self.top_10_countries:
            for _item in self.top_10_countries:
                if _item:
                    _items.append(_item.to_dict())
            _dict['top_10_countries'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in top_10_ips (list)
        _items = []
        if self.top_10_ips:
            for _item in self.top_10_ips:
                if _item:
                    _items.append(_item.to_dict())
            _dict['top_10_ips'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WAFEvents200ResultsInner:
        """Create an instance of WAFEvents200ResultsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WAFEvents200ResultsInner.parse_obj(obj)

        _obj = WAFEvents200ResultsInner.parse_obj({
            "country_count": obj.get("country_count"),
            "top_10_countries": [WAFEvents200ResultsInnerTop10CountriesInner.from_dict(_item) for _item in obj.get("top_10_countries")] if obj.get("top_10_countries") is not None else None,
            "top_10_ips": [WAFEvents200ResultsInnerTop10CountriesInner.from_dict(_item) for _item in obj.get("top_10_ips")] if obj.get("top_10_ips") is not None else None,
            "hit_count": obj.get("hit_count"),
            "rule_id": obj.get("rule_id"),
            "ip_count": obj.get("ip_count"),
            "match_zone": obj.get("match_zone"),
            "path_count": obj.get("path_count"),
            "matches_on": obj.get("matches_on"),
            "rule_description": obj.get("rule_description")
        })
        return _obj


