# coding: utf-8

"""
    Domain API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from domains import schemas  # noqa: F401


class UpdateDomainRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class cnames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cnames':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            cname_access_only = schemas.BoolSchema
            name = schemas.StrSchema
            is_active = schemas.BoolSchema
            edge_application_id = schemas.Int64Schema
            
            
            class digital_certificate_id(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'digital_certificate_id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "cnames": cnames,
                "cname_access_only": cname_access_only,
                "name": name,
                "is_active": is_active,
                "edge_application_id": edge_application_id,
                "digital_certificate_id": digital_certificate_id,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cnames"]) -> MetaOapg.properties.cnames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cname_access_only"]) -> MetaOapg.properties.cname_access_only: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edge_application_id"]) -> MetaOapg.properties.edge_application_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digital_certificate_id"]) -> MetaOapg.properties.digital_certificate_id: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cnames"], typing_extensions.Literal["cname_access_only"], typing_extensions.Literal["name"], typing_extensions.Literal["is_active"], typing_extensions.Literal["edge_application_id"], typing_extensions.Literal["digital_certificate_id"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cnames"]) -> typing.Union[MetaOapg.properties.cnames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cname_access_only"]) -> typing.Union[MetaOapg.properties.cname_access_only, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> typing.Union[MetaOapg.properties.is_active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edge_application_id"]) -> typing.Union[MetaOapg.properties.edge_application_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digital_certificate_id"]) -> typing.Union[MetaOapg.properties.digital_certificate_id, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cnames"], typing_extensions.Literal["cname_access_only"], typing_extensions.Literal["name"], typing_extensions.Literal["is_active"], typing_extensions.Literal["edge_application_id"], typing_extensions.Literal["digital_certificate_id"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        cnames: typing.Union[MetaOapg.properties.cnames, list, tuple, schemas.Unset] = schemas.unset,
        cname_access_only: typing.Union[MetaOapg.properties.cname_access_only, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        is_active: typing.Union[MetaOapg.properties.is_active, bool, schemas.Unset] = schemas.unset,
        edge_application_id: typing.Union[MetaOapg.properties.edge_application_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        digital_certificate_id: typing.Union[MetaOapg.properties.digital_certificate_id, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'UpdateDomainRequest':
        return super().__new__(
            cls,
            *_args,
            cnames=cnames,
            cname_access_only=cname_access_only,
            name=name,
            is_active=is_active,
            edge_application_id=edge_application_id,
            digital_certificate_id=digital_certificate_id,
            _configuration=_configuration,
        )
