# coding: utf-8

"""
    Domain API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from domains import schemas  # noqa: F401


class DomainResponseWithResult(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "schema_version",
            "results",
        }
        
        class properties:
            schema_version = schemas.Int64Schema
        
            @staticmethod
            def results() -> typing.Type['DomainResults']:
                return DomainResults
            __annotations__ = {
                "schema_version": schema_version,
                "results": results,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    schema_version: MetaOapg.properties.schema_version
    results: 'DomainResults'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schema_version"]) -> MetaOapg.properties.schema_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["results"]) -> 'DomainResults': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["schema_version"], typing_extensions.Literal["results"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schema_version"]) -> MetaOapg.properties.schema_version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["results"]) -> 'DomainResults': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["schema_version"], typing_extensions.Literal["results"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        schema_version: typing.Union[MetaOapg.properties.schema_version, decimal.Decimal, int, ],
        results: 'DomainResults',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DomainResponseWithResult':
        return super().__new__(
            cls,
            *_args,
            schema_version=schema_version,
            results=results,
            _configuration=_configuration,
        )

from domains.model.domain_results import DomainResults
