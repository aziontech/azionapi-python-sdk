# coding: utf-8

"""
    Edge Application API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class CreateApplicationRequest(BaseModel):
    """
    CreateApplicationRequest
    """
    name: StrictStr = Field(...)
    application_acceleration: Optional[StrictBool] = None
    delivery_protocol: Optional[StrictStr] = None
    origin_type: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    minimum_tls_version: Optional[StrictStr] = None
    origin_protocol_policy: Optional[StrictStr] = None
    host_header: Optional[StrictStr] = None
    browser_cache_settings: Optional[StrictStr] = None
    cdn_cache_settings: Optional[StrictStr] = None
    browser_cache_settings_maximum_ttl: Optional[StrictInt] = None
    cdn_cache_settings_maximum_ttl: Optional[StrictInt] = None
    debug_rules: Optional[StrictBool] = None
    supported_ciphers: Optional[StrictStr] = None
    http_port: Optional[Any] = None
    https_port: Optional[Any] = None
    l2_caching: Optional[StrictBool] = None
    http3: Optional[StrictBool] = None
    websocket: Optional[StrictBool] = None
    __properties = ["name", "application_acceleration", "delivery_protocol", "origin_type", "address", "minimum_tls_version", "origin_protocol_policy", "host_header", "browser_cache_settings", "cdn_cache_settings", "browser_cache_settings_maximum_ttl", "cdn_cache_settings_maximum_ttl", "debug_rules", "supported_ciphers", "http_port", "https_port", "l2_caching", "http3", "websocket"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CreateApplicationRequest:
        """Create an instance of CreateApplicationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if http_port (nullable) is None
        # and __fields_set__ contains the field
        if self.http_port is None and "http_port" in self.__fields_set__:
            _dict['http_port'] = None

        # set to None if https_port (nullable) is None
        # and __fields_set__ contains the field
        if self.https_port is None and "https_port" in self.__fields_set__:
            _dict['https_port'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CreateApplicationRequest:
        """Create an instance of CreateApplicationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CreateApplicationRequest.parse_obj(obj)

        _obj = CreateApplicationRequest.parse_obj({
            "name": obj.get("name"),
            "application_acceleration": obj.get("application_acceleration"),
            "delivery_protocol": obj.get("delivery_protocol"),
            "origin_type": obj.get("origin_type"),
            "address": obj.get("address"),
            "minimum_tls_version": obj.get("minimum_tls_version"),
            "origin_protocol_policy": obj.get("origin_protocol_policy"),
            "host_header": obj.get("host_header"),
            "browser_cache_settings": obj.get("browser_cache_settings"),
            "cdn_cache_settings": obj.get("cdn_cache_settings"),
            "browser_cache_settings_maximum_ttl": obj.get("browser_cache_settings_maximum_ttl"),
            "cdn_cache_settings_maximum_ttl": obj.get("cdn_cache_settings_maximum_ttl"),
            "debug_rules": obj.get("debug_rules"),
            "supported_ciphers": obj.get("supported_ciphers"),
            "http_port": obj.get("http_port"),
            "https_port": obj.get("https_port"),
            "l2_caching": obj.get("l2_caching"),
            "http3": obj.get("http3"),
            "websocket": obj.get("websocket")
        })
        return _obj


