# coding: utf-8

"""
    Edge Application API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from edgeapplications.models.create_origins_request_addresses import CreateOriginsRequestAddresses

class UpdateOriginsRequest(BaseModel):
    """
    UpdateOriginsRequest
    """
    name: StrictStr = Field(...)
    origin_type: Optional[StrictStr] = None
    addresses: conlist(CreateOriginsRequestAddresses) = Field(...)
    origin_protocol_policy: Optional[StrictStr] = None
    host_header: StrictStr = Field(...)
    origin_path: Optional[StrictStr] = None
    hmac_authentication: Optional[StrictBool] = None
    hmac_region_name: Optional[StrictStr] = None
    hmac_access_key: Optional[StrictStr] = None
    hmac_secret_key: Optional[StrictStr] = None
    __properties = ["name", "origin_type", "addresses", "origin_protocol_policy", "host_header", "origin_path", "hmac_authentication", "hmac_region_name", "hmac_access_key", "hmac_secret_key"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateOriginsRequest:
        """Create an instance of UpdateOriginsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item in self.addresses:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addresses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateOriginsRequest:
        """Create an instance of UpdateOriginsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateOriginsRequest.parse_obj(obj)

        _obj = UpdateOriginsRequest.parse_obj({
            "name": obj.get("name"),
            "origin_type": obj.get("origin_type"),
            "addresses": [CreateOriginsRequestAddresses.from_dict(_item) for _item in obj.get("addresses")] if obj.get("addresses") is not None else None,
            "origin_protocol_policy": obj.get("origin_protocol_policy"),
            "host_header": obj.get("host_header"),
            "origin_path": obj.get("origin_path"),
            "hmac_authentication": obj.get("hmac_authentication"),
            "hmac_region_name": obj.get("hmac_region_name"),
            "hmac_access_key": obj.get("hmac_access_key"),
            "hmac_secret_key": obj.get("hmac_secret_key")
        })
        return _obj


