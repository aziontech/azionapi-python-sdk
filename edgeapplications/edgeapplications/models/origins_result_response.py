# coding: utf-8

"""
    Edge Application API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from edgeapplications.models.origins_result_response_addresses import OriginsResultResponseAddresses
from typing import Optional, Set
from typing_extensions import Self

class OriginsResultResponse(BaseModel):
    """
    OriginsResultResponse
    """ # noqa: E501
    origin_id: Optional[StrictInt] = None
    origin_key: Optional[StrictStr] = None
    name: StrictStr
    origin_type: Optional[StrictStr] = None
    addresses: Optional[List[OriginsResultResponseAddresses]] = None
    origin_protocol_policy: Optional[StrictStr] = None
    is_origin_redirection_enabled: Optional[StrictBool] = None
    host_header: Optional[StrictStr] = None
    method: Optional[StrictStr] = None
    origin_path: Optional[StrictStr] = None
    connection_timeout: Optional[StrictInt] = None
    timeout_between_bytes: Optional[StrictInt] = None
    hmac_authentication: Optional[StrictBool] = None
    hmac_region_name: Optional[StrictStr] = None
    hmac_access_key: Optional[StrictStr] = None
    hmac_secret_key: Optional[StrictStr] = None
    bucket: Optional[StrictStr] = None
    prefix: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["origin_id", "origin_key", "name", "origin_type", "addresses", "origin_protocol_policy", "is_origin_redirection_enabled", "host_header", "method", "origin_path", "connection_timeout", "timeout_between_bytes", "hmac_authentication", "hmac_region_name", "hmac_access_key", "hmac_secret_key", "bucket", "prefix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OriginsResultResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in addresses (list)
        _items = []
        if self.addresses:
            for _item_addresses in self.addresses:
                if _item_addresses:
                    _items.append(_item_addresses.to_dict())
            _dict['addresses'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OriginsResultResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "origin_id": obj.get("origin_id"),
            "origin_key": obj.get("origin_key"),
            "name": obj.get("name"),
            "origin_type": obj.get("origin_type"),
            "addresses": [OriginsResultResponseAddresses.from_dict(_item) for _item in obj["addresses"]] if obj.get("addresses") is not None else None,
            "origin_protocol_policy": obj.get("origin_protocol_policy"),
            "is_origin_redirection_enabled": obj.get("is_origin_redirection_enabled"),
            "host_header": obj.get("host_header"),
            "method": obj.get("method"),
            "origin_path": obj.get("origin_path"),
            "connection_timeout": obj.get("connection_timeout"),
            "timeout_between_bytes": obj.get("timeout_between_bytes"),
            "hmac_authentication": obj.get("hmac_authentication"),
            "hmac_region_name": obj.get("hmac_region_name"),
            "hmac_access_key": obj.get("hmac_access_key"),
            "hmac_secret_key": obj.get("hmac_secret_key"),
            "bucket": obj.get("bucket"),
            "prefix": obj.get("prefix")
        })
        return _obj


