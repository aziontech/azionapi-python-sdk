# coding: utf-8

"""
    Edge Application API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictInt, StrictStr

from typing import Optional

from edgeapplications.models.create_rules_engine_request import CreateRulesEngineRequest
from edgeapplications.models.patch_rules_engine_request import PatchRulesEngineRequest
from edgeapplications.models.rules_engine_id_response import RulesEngineIdResponse
from edgeapplications.models.rules_engine_response import RulesEngineResponse
from edgeapplications.models.update_rules_engine_request import UpdateRulesEngineRequest

from edgeapplications.api_client import ApiClient
from edgeapplications.api_response import ApiResponse
from edgeapplications.rest import RESTResponseType


class EdgeApplicationsRulesEngineApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_get(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        filter: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        sort: Optional[StrictStr] = None,
        accept: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RulesEngineResponse:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules


        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param filter:
        :type filter: str
        :param order_by:
        :type order_by: str
        :param sort:
        :type sort: str
        :param accept:
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_get_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            page=page,
            page_size=page_size,
            filter=filter,
            order_by=order_by,
            sort=sort,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_get_with_http_info(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        filter: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        sort: Optional[StrictStr] = None,
        accept: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RulesEngineResponse]:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules


        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param filter:
        :type filter: str
        :param order_by:
        :type order_by: str
        :param sort:
        :type sort: str
        :param accept:
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_get_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            page=page,
            page_size=page_size,
            filter=filter,
            order_by=order_by,
            sort=sort,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_get_without_preload_content(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        page: Optional[StrictInt] = None,
        page_size: Optional[StrictInt] = None,
        filter: Optional[StrictStr] = None,
        order_by: Optional[StrictStr] = None,
        sort: Optional[StrictStr] = None,
        accept: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules


        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param filter:
        :type filter: str
        :param order_by:
        :type order_by: str
        :param sort:
        :type sort: str
        :param accept:
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_get_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            page=page,
            page_size=page_size,
            filter=filter,
            order_by=order_by,
            sort=sort,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _edge_applications_edge_application_id_rules_engine_phase_rules_get_serialize(
        self,
        edge_application_id,
        phase,
        page,
        page_size,
        filter,
        order_by,
        sort,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if edge_application_id is not None:
            _path_params['edge_application_id'] = edge_application_id
        if phase is not None:
            _path_params['phase'] = phase
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if order_by is not None:
            
            _query_params.append(('order_by', order_by))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json; version=3'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/edge_applications/{edge_application_id}/rules_engine/{phase}/rules',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_post(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        accept: Optional[StrictStr] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None,
        create_rules_engine_request: Optional[CreateRulesEngineRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RulesEngineIdResponse:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules

        Check below the list of behaviors that can be applied:  | Name                                | Behavior               | | ----------------------------------- | ---------------------- | | Add Request Cookie                  | add_request_cookie     | | Add Request Header                  | add_request_header     | | Add Response Cookie                 | set_cookie             | | Add Response Header                 | add_response_header    | | Bypass Cache                        | bypass_cache_phase     | | Capture Match Groups                | capture_match_groups   | | Deliver                             | deliver                | | Deny (403 Forbidden)                | deny                   | | Enable Gzip                         | enable_gzip            | | Filter Request Cookie               | filter_request_cookie  | | Filter Request Header               | filter_request_header  | | Filter Response Cookie              | filter_response_cookie | | Filter Response Header              | filter_response_header | | Finish Request Phase                | finish_request_phase   | | Forward Cookies                     | forward_cookies        | | Optimize Images                     | optimize_images        | | Redirect HTTP to HTTPS              | redirect_http_to_https | | Redirect To (301 Moved Permanently) | redirect_to_301        | | Redirect To (302 Found)             | redirect_to_302        | | Rewrite Request                     | rewrite_request        | | Run Function                        | run_function           | | Set Cache Policy                    | set_cache_policy       | | Set Origin                          | set_origin             |

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param create_rules_engine_request:
        :type create_rules_engine_request: CreateRulesEngineRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_post_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            accept=accept,
            content_type=content_type,
            create_rules_engine_request=create_rules_engine_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_post_with_http_info(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        accept: Optional[StrictStr] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None,
        create_rules_engine_request: Optional[CreateRulesEngineRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RulesEngineIdResponse]:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules

        Check below the list of behaviors that can be applied:  | Name                                | Behavior               | | ----------------------------------- | ---------------------- | | Add Request Cookie                  | add_request_cookie     | | Add Request Header                  | add_request_header     | | Add Response Cookie                 | set_cookie             | | Add Response Header                 | add_response_header    | | Bypass Cache                        | bypass_cache_phase     | | Capture Match Groups                | capture_match_groups   | | Deliver                             | deliver                | | Deny (403 Forbidden)                | deny                   | | Enable Gzip                         | enable_gzip            | | Filter Request Cookie               | filter_request_cookie  | | Filter Request Header               | filter_request_header  | | Filter Response Cookie              | filter_response_cookie | | Filter Response Header              | filter_response_header | | Finish Request Phase                | finish_request_phase   | | Forward Cookies                     | forward_cookies        | | Optimize Images                     | optimize_images        | | Redirect HTTP to HTTPS              | redirect_http_to_https | | Redirect To (301 Moved Permanently) | redirect_to_301        | | Redirect To (302 Found)             | redirect_to_302        | | Rewrite Request                     | rewrite_request        | | Run Function                        | run_function           | | Set Cache Policy                    | set_cache_policy       | | Set Origin                          | set_origin             |

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param create_rules_engine_request:
        :type create_rules_engine_request: CreateRulesEngineRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_post_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            accept=accept,
            content_type=content_type,
            create_rules_engine_request=create_rules_engine_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_post_without_preload_content(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        accept: Optional[StrictStr] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None,
        create_rules_engine_request: Optional[CreateRulesEngineRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules

        Check below the list of behaviors that can be applied:  | Name                                | Behavior               | | ----------------------------------- | ---------------------- | | Add Request Cookie                  | add_request_cookie     | | Add Request Header                  | add_request_header     | | Add Response Cookie                 | set_cookie             | | Add Response Header                 | add_response_header    | | Bypass Cache                        | bypass_cache_phase     | | Capture Match Groups                | capture_match_groups   | | Deliver                             | deliver                | | Deny (403 Forbidden)                | deny                   | | Enable Gzip                         | enable_gzip            | | Filter Request Cookie               | filter_request_cookie  | | Filter Request Header               | filter_request_header  | | Filter Response Cookie              | filter_response_cookie | | Filter Response Header              | filter_response_header | | Finish Request Phase                | finish_request_phase   | | Forward Cookies                     | forward_cookies        | | Optimize Images                     | optimize_images        | | Redirect HTTP to HTTPS              | redirect_http_to_https | | Redirect To (301 Moved Permanently) | redirect_to_301        | | Redirect To (302 Found)             | redirect_to_302        | | Rewrite Request                     | rewrite_request        | | Run Function                        | run_function           | | Set Cache Policy                    | set_cache_policy       | | Set Origin                          | set_origin             |

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param create_rules_engine_request:
        :type create_rules_engine_request: CreateRulesEngineRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_post_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            accept=accept,
            content_type=content_type,
            create_rules_engine_request=create_rules_engine_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _edge_applications_edge_application_id_rules_engine_phase_rules_post_serialize(
        self,
        edge_application_id,
        phase,
        accept,
        content_type,
        create_rules_engine_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if edge_application_id is not None:
            _path_params['edge_application_id'] = edge_application_id
        if phase is not None:
            _path_params['phase'] = phase
        # process the query parameters
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter
        if create_rules_engine_request is not None:
            _body_params = create_rules_engine_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json; version=3'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; version=3'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/edge_applications/{edge_application_id}/rules_engine/{phase}/rules',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_delete(
        self,
        edge_application_id: Annotated[StrictInt, Field(description="The id of the edge application you plan to delete. ")],
        phase: StrictStr,
        rule_id: Annotated[StrictInt, Field(description="The id of the rule you plan to delete. ")],
        accept: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules


        :param edge_application_id: The id of the edge application you plan to delete.  (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: The id of the rule you plan to delete.  (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_delete_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_delete_with_http_info(
        self,
        edge_application_id: Annotated[StrictInt, Field(description="The id of the edge application you plan to delete. ")],
        phase: StrictStr,
        rule_id: Annotated[StrictInt, Field(description="The id of the rule you plan to delete. ")],
        accept: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules


        :param edge_application_id: The id of the edge application you plan to delete.  (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: The id of the rule you plan to delete.  (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_delete_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_delete_without_preload_content(
        self,
        edge_application_id: Annotated[StrictInt, Field(description="The id of the edge application you plan to delete. ")],
        phase: StrictStr,
        rule_id: Annotated[StrictInt, Field(description="The id of the rule you plan to delete. ")],
        accept: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules


        :param edge_application_id: The id of the edge application you plan to delete.  (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: The id of the rule you plan to delete.  (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_delete_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_delete_serialize(
        self,
        edge_application_id,
        phase,
        rule_id,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if edge_application_id is not None:
            _path_params['edge_application_id'] = edge_application_id
        if phase is not None:
            _path_params['phase'] = phase
        if rule_id is not None:
            _path_params['rule_id'] = rule_id
        # process the query parameters
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_get(
        self,
        edge_application_id: Annotated[StrictInt, Field(description="The id of the edge application you want to get. ")],
        phase: StrictStr,
        rule_id: Annotated[StrictInt, Field(description="The id of the rule you plan to delete. ")],
        accept: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RulesEngineIdResponse:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules


        :param edge_application_id: The id of the edge application you want to get.  (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: The id of the rule you plan to delete.  (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_get_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_get_with_http_info(
        self,
        edge_application_id: Annotated[StrictInt, Field(description="The id of the edge application you want to get. ")],
        phase: StrictStr,
        rule_id: Annotated[StrictInt, Field(description="The id of the rule you plan to delete. ")],
        accept: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RulesEngineIdResponse]:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules


        :param edge_application_id: The id of the edge application you want to get.  (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: The id of the rule you plan to delete.  (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_get_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_get_without_preload_content(
        self,
        edge_application_id: Annotated[StrictInt, Field(description="The id of the edge application you want to get. ")],
        phase: StrictStr,
        rule_id: Annotated[StrictInt, Field(description="The id of the rule you plan to delete. ")],
        accept: Optional[StrictStr] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """/edge_applications/{edge_application_id}/rules_engine/{phase}/rules


        :param edge_application_id: The id of the edge application you want to get.  (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: The id of the rule you plan to delete.  (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_get_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_get_serialize(
        self,
        edge_application_id,
        phase,
        rule_id,
        accept,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if edge_application_id is not None:
            _path_params['edge_application_id'] = edge_application_id
        if phase is not None:
            _path_params['phase'] = phase
        if rule_id is not None:
            _path_params['rule_id'] = rule_id
        # process the query parameters
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json; version=3'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_patch(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        rule_id: StrictInt,
        accept: Optional[StrictStr] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None,
        patch_rules_engine_request: Optional[PatchRulesEngineRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RulesEngineIdResponse:
        """/edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:


        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param patch_rules_engine_request:
        :type patch_rules_engine_request: PatchRulesEngineRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_patch_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            content_type=content_type,
            patch_rules_engine_request=patch_rules_engine_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_patch_with_http_info(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        rule_id: StrictInt,
        accept: Optional[StrictStr] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None,
        patch_rules_engine_request: Optional[PatchRulesEngineRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RulesEngineIdResponse]:
        """/edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:


        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param patch_rules_engine_request:
        :type patch_rules_engine_request: PatchRulesEngineRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_patch_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            content_type=content_type,
            patch_rules_engine_request=patch_rules_engine_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_patch_without_preload_content(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        rule_id: StrictInt,
        accept: Optional[StrictStr] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None,
        patch_rules_engine_request: Optional[PatchRulesEngineRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """/edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:


        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param patch_rules_engine_request:
        :type patch_rules_engine_request: PatchRulesEngineRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_patch_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            content_type=content_type,
            patch_rules_engine_request=patch_rules_engine_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_patch_serialize(
        self,
        edge_application_id,
        phase,
        rule_id,
        accept,
        content_type,
        patch_rules_engine_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if edge_application_id is not None:
            _path_params['edge_application_id'] = edge_application_id
        if phase is not None:
            _path_params['phase'] = phase
        if rule_id is not None:
            _path_params['rule_id'] = rule_id
        # process the query parameters
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter
        if patch_rules_engine_request is not None:
            _body_params = patch_rules_engine_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json; version=3'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; version=3'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_put(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        rule_id: StrictInt,
        accept: Optional[StrictStr] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None,
        update_rules_engine_request: Optional[UpdateRulesEngineRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RulesEngineIdResponse:
        """/edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:


        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param update_rules_engine_request:
        :type update_rules_engine_request: UpdateRulesEngineRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_put_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            content_type=content_type,
            update_rules_engine_request=update_rules_engine_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_put_with_http_info(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        rule_id: StrictInt,
        accept: Optional[StrictStr] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None,
        update_rules_engine_request: Optional[UpdateRulesEngineRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RulesEngineIdResponse]:
        """/edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:


        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param update_rules_engine_request:
        :type update_rules_engine_request: UpdateRulesEngineRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_put_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            content_type=content_type,
            update_rules_engine_request=update_rules_engine_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_put_without_preload_content(
        self,
        edge_application_id: StrictInt,
        phase: StrictStr,
        rule_id: StrictInt,
        accept: Optional[StrictStr] = None,
        content_type: Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None,
        update_rules_engine_request: Optional[UpdateRulesEngineRequest] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """/edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:


        :param edge_application_id: (required)
        :type edge_application_id: int
        :param phase: (required)
        :type phase: str
        :param rule_id: (required)
        :type rule_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param update_rules_engine_request:
        :type update_rules_engine_request: UpdateRulesEngineRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_put_serialize(
            edge_application_id=edge_application_id,
            phase=phase,
            rule_id=rule_id,
            accept=accept,
            content_type=content_type,
            update_rules_engine_request=update_rules_engine_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RulesEngineIdResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None
            
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _edge_applications_edge_application_id_rules_engine_phase_rules_rule_id_put_serialize(
        self,
        edge_application_id,
        phase,
        rule_id,
        accept,
        content_type,
        update_rules_engine_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
            
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if edge_application_id is not None:
            _path_params['edge_application_id'] = edge_application_id
        if phase is not None:
            _path_params['phase'] = phase
        if rule_id is not None:
            _path_params['rule_id'] = rule_id
        # process the query parameters
        # process the header parameters
        if accept is not None:
            _header_params['Accept'] = accept
        if content_type is not None:
            _header_params['Content-Type'] = content_type
        # process the form parameters
        # process the body parameter
        if update_rules_engine_request is not None:
            _body_params = update_rules_engine_request


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json; version=3'
            ]
        )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json; version=3'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'tokenAuth'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


