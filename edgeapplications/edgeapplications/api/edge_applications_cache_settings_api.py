# coding: utf-8

"""
    Edge Application API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr

from typing import Optional

from edgeapplications.models.application_cache_create_request import ApplicationCacheCreateRequest
from edgeapplications.models.application_cache_create_response import ApplicationCacheCreateResponse
from edgeapplications.models.application_cache_get_one_response import ApplicationCacheGetOneResponse
from edgeapplications.models.application_cache_get_response import ApplicationCacheGetResponse
from edgeapplications.models.application_cache_patch_request import ApplicationCachePatchRequest
from edgeapplications.models.application_cache_patch_response import ApplicationCachePatchResponse
from edgeapplications.models.application_cache_put_request import ApplicationCachePutRequest
from edgeapplications.models.application_cache_put_response import ApplicationCachePutResponse

from edgeapplications.api_client import ApiClient
from edgeapplications.api_response import ApiResponse
from edgeapplications.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EdgeApplicationsCacheSettingsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_cache_settings_id_delete(self, edge_application_id : StrictInt, cache_settings_id : StrictInt, accept : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None, **kwargs) -> None:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_cache_settings_id_delete(edge_application_id, cache_settings_id, accept, content_type, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param cache_settings_id: (required)
        :type cache_settings_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the edge_applications_edge_application_id_cache_settings_cache_settings_id_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.edge_applications_edge_application_id_cache_settings_cache_settings_id_delete_with_http_info(edge_application_id, cache_settings_id, accept, content_type, **kwargs)  # noqa: E501

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_cache_settings_id_delete_with_http_info(self, edge_application_id : StrictInt, cache_settings_id : StrictInt, accept : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_cache_settings_id_delete_with_http_info(edge_application_id, cache_settings_id, accept, content_type, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param cache_settings_id: (required)
        :type cache_settings_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'edge_application_id',
            'cache_settings_id',
            'accept',
            'content_type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_applications_edge_application_id_cache_settings_cache_settings_id_delete" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['edge_application_id']:
            _path_params['edge_application_id'] = _params['edge_application_id']

        if _params['cache_settings_id']:
            _path_params['cache_settings_id'] = _params['cache_settings_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept']:
            _header_params['Accept'] = _params['accept']

        if _params['content_type']:
            _header_params['Content-Type'] = _params['content_type']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_cache_settings_id_get(self, edge_application_id : StrictInt, cache_settings_id : StrictInt, accept : Optional[StrictStr] = None, **kwargs) -> ApplicationCacheGetOneResponse:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_cache_settings_id_get(edge_application_id, cache_settings_id, accept, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param cache_settings_id: (required)
        :type cache_settings_id: int
        :param accept:
        :type accept: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApplicationCacheGetOneResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the edge_applications_edge_application_id_cache_settings_cache_settings_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.edge_applications_edge_application_id_cache_settings_cache_settings_id_get_with_http_info(edge_application_id, cache_settings_id, accept, **kwargs)  # noqa: E501

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_cache_settings_id_get_with_http_info(self, edge_application_id : StrictInt, cache_settings_id : StrictInt, accept : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_cache_settings_id_get_with_http_info(edge_application_id, cache_settings_id, accept, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param cache_settings_id: (required)
        :type cache_settings_id: int
        :param accept:
        :type accept: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApplicationCacheGetOneResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'edge_application_id',
            'cache_settings_id',
            'accept'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_applications_edge_application_id_cache_settings_cache_settings_id_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['edge_application_id']:
            _path_params['edge_application_id'] = _params['edge_application_id']

        if _params['cache_settings_id']:
            _path_params['cache_settings_id'] = _params['cache_settings_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept']:
            _header_params['Accept'] = _params['accept']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApplicationCacheGetOneResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_cache_settings_id_patch(self, edge_application_id : StrictInt, cache_settings_id : StrictInt, accept : Optional[StrictStr] = None, application_cache_patch_request : Optional[ApplicationCachePatchRequest] = None, **kwargs) -> ApplicationCachePatchResponse:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_cache_settings_id_patch(edge_application_id, cache_settings_id, accept, application_cache_patch_request, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param cache_settings_id: (required)
        :type cache_settings_id: int
        :param accept:
        :type accept: str
        :param application_cache_patch_request:
        :type application_cache_patch_request: ApplicationCachePatchRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApplicationCachePatchResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the edge_applications_edge_application_id_cache_settings_cache_settings_id_patch_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.edge_applications_edge_application_id_cache_settings_cache_settings_id_patch_with_http_info(edge_application_id, cache_settings_id, accept, application_cache_patch_request, **kwargs)  # noqa: E501

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_cache_settings_id_patch_with_http_info(self, edge_application_id : StrictInt, cache_settings_id : StrictInt, accept : Optional[StrictStr] = None, application_cache_patch_request : Optional[ApplicationCachePatchRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_cache_settings_id_patch_with_http_info(edge_application_id, cache_settings_id, accept, application_cache_patch_request, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param cache_settings_id: (required)
        :type cache_settings_id: int
        :param accept:
        :type accept: str
        :param application_cache_patch_request:
        :type application_cache_patch_request: ApplicationCachePatchRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApplicationCachePatchResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'edge_application_id',
            'cache_settings_id',
            'accept',
            'application_cache_patch_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_applications_edge_application_id_cache_settings_cache_settings_id_patch" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['edge_application_id']:
            _path_params['edge_application_id'] = _params['edge_application_id']

        if _params['cache_settings_id']:
            _path_params['cache_settings_id'] = _params['cache_settings_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept']:
            _header_params['Accept'] = _params['accept']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['application_cache_patch_request'] is not None:
            _body_params = _params['application_cache_patch_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json; version=3']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApplicationCachePatchResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_cache_settings_id_put(self, edge_application_id : StrictInt, cache_settings_id : StrictInt, accept : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None, application_cache_put_request : Optional[ApplicationCachePutRequest] = None, **kwargs) -> ApplicationCachePutResponse:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings/ca  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_cache_settings_id_put(edge_application_id, cache_settings_id, accept, content_type, application_cache_put_request, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param cache_settings_id: (required)
        :type cache_settings_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param application_cache_put_request:
        :type application_cache_put_request: ApplicationCachePutRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApplicationCachePutResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the edge_applications_edge_application_id_cache_settings_cache_settings_id_put_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.edge_applications_edge_application_id_cache_settings_cache_settings_id_put_with_http_info(edge_application_id, cache_settings_id, accept, content_type, application_cache_put_request, **kwargs)  # noqa: E501

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_cache_settings_id_put_with_http_info(self, edge_application_id : StrictInt, cache_settings_id : StrictInt, accept : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None, application_cache_put_request : Optional[ApplicationCachePutRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings/ca  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_cache_settings_id_put_with_http_info(edge_application_id, cache_settings_id, accept, content_type, application_cache_put_request, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param cache_settings_id: (required)
        :type cache_settings_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param application_cache_put_request:
        :type application_cache_put_request: ApplicationCachePutRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApplicationCachePutResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'edge_application_id',
            'cache_settings_id',
            'accept',
            'content_type',
            'application_cache_put_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_applications_edge_application_id_cache_settings_cache_settings_id_put" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['edge_application_id']:
            _path_params['edge_application_id'] = _params['edge_application_id']

        if _params['cache_settings_id']:
            _path_params['cache_settings_id'] = _params['cache_settings_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept']:
            _header_params['Accept'] = _params['accept']

        if _params['content_type']:
            _header_params['Content-Type'] = _params['content_type']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['application_cache_put_request'] is not None:
            _body_params = _params['application_cache_put_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json; version=3']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApplicationCachePutResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_get(self, edge_application_id : StrictInt, page : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, filter : Optional[StrictStr] = None, order_by : Optional[StrictStr] = None, sort : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, **kwargs) -> ApplicationCacheGetResponse:  # noqa: E501
        """/edge_applications/{edge_application_id}/cache_settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_get(edge_application_id, page, page_size, filter, order_by, sort, accept, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param filter:
        :type filter: str
        :param order_by:
        :type order_by: str
        :param sort:
        :type sort: str
        :param accept:
        :type accept: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApplicationCacheGetResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the edge_applications_edge_application_id_cache_settings_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.edge_applications_edge_application_id_cache_settings_get_with_http_info(edge_application_id, page, page_size, filter, order_by, sort, accept, **kwargs)  # noqa: E501

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_get_with_http_info(self, edge_application_id : StrictInt, page : Optional[StrictInt] = None, page_size : Optional[StrictInt] = None, filter : Optional[StrictStr] = None, order_by : Optional[StrictStr] = None, sort : Optional[StrictStr] = None, accept : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/edge_applications/{edge_application_id}/cache_settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_get_with_http_info(edge_application_id, page, page_size, filter, order_by, sort, accept, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param page:
        :type page: int
        :param page_size:
        :type page_size: int
        :param filter:
        :type filter: str
        :param order_by:
        :type order_by: str
        :param sort:
        :type sort: str
        :param accept:
        :type accept: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApplicationCacheGetResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'edge_application_id',
            'page',
            'page_size',
            'filter',
            'order_by',
            'sort',
            'accept'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_applications_edge_application_id_cache_settings_get" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['edge_application_id']:
            _path_params['edge_application_id'] = _params['edge_application_id']


        # process the query parameters
        _query_params = []
        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('order_by') is not None:  # noqa: E501
            _query_params.append(('order_by', _params['order_by']))

        if _params.get('sort') is not None:  # noqa: E501
            _query_params.append(('sort', _params['sort']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept']:
            _header_params['Accept'] = _params['accept']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApplicationCacheGetResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/edge_applications/{edge_application_id}/cache_settings', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_post(self, edge_application_id : StrictInt, accept : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None, application_cache_create_request : Optional[ApplicationCacheCreateRequest] = None, **kwargs) -> ApplicationCacheCreateResponse:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_post(edge_application_id, accept, content_type, application_cache_create_request, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param application_cache_create_request:
        :type application_cache_create_request: ApplicationCacheCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ApplicationCacheCreateResponse
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the edge_applications_edge_application_id_cache_settings_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.edge_applications_edge_application_id_cache_settings_post_with_http_info(edge_application_id, accept, content_type, application_cache_create_request, **kwargs)  # noqa: E501

    @validate_arguments
    def edge_applications_edge_application_id_cache_settings_post_with_http_info(self, edge_application_id : StrictInt, accept : Optional[StrictStr] = None, content_type : Annotated[Optional[StrictStr], Field(description="The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json")] = None, application_cache_create_request : Optional[ApplicationCacheCreateRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """/edge_applications/:edge_application_id:/cache_settings  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edge_applications_edge_application_id_cache_settings_post_with_http_info(edge_application_id, accept, content_type, application_cache_create_request, async_req=True)
        >>> result = thread.get()

        :param edge_application_id: (required)
        :type edge_application_id: int
        :param accept:
        :type accept: str
        :param content_type: The type of coding used in the Body (application/json). <br>  Example: Content-Type: application/json
        :type content_type: str
        :param application_cache_create_request:
        :type application_cache_create_request: ApplicationCacheCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ApplicationCacheCreateResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'edge_application_id',
            'accept',
            'content_type',
            'application_cache_create_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edge_applications_edge_application_id_cache_settings_post" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['edge_application_id']:
            _path_params['edge_application_id'] = _params['edge_application_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['accept']:
            _header_params['Accept'] = _params['accept']

        if _params['content_type']:
            _header_params['Content-Type'] = _params['content_type']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['application_cache_create_request'] is not None:
            _body_params = _params['application_cache_create_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; version=3'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json; version=3']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "ApplicationCacheCreateResponse",
            '400': None,
            '403': None,
            '404': None,
            '422': None,
            '500': None,
        }

        return self.api_client.call_api(
            '/edge_applications/{edge_application_id}/cache_settings', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
