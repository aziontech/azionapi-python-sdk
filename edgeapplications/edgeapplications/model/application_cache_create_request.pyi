# coding: utf-8

"""
    Edge Application API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from edgeapplications import schemas  # noqa: F401


class ApplicationCacheCreateRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            browser_cache_settings = schemas.StrSchema
            browser_cache_settings_maximum_ttl = schemas.Int64Schema
            cdn_cache_settings = schemas.StrSchema
            cdn_cache_settings_maximum_ttl = schemas.Int64Schema
            cache_by_query_string = schemas.StrSchema
            
            
            class query_string_fields(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'query_string_fields':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            enable_query_string_sort = schemas.BoolSchema
            cache_by_cookies = schemas.StrSchema
            
            
            class cookie_names(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cookie_names':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            user_email = schemas.StrSchema
            l2_caching_enabled = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "browser_cache_settings": browser_cache_settings,
                "browser_cache_settings_maximum_ttl": browser_cache_settings_maximum_ttl,
                "cdn_cache_settings": cdn_cache_settings,
                "cdn_cache_settings_maximum_ttl": cdn_cache_settings_maximum_ttl,
                "cache_by_query_string": cache_by_query_string,
                "query_string_fields": query_string_fields,
                "enable_query_string_sort": enable_query_string_sort,
                "cache_by_cookies": cache_by_cookies,
                "cookie_names": cookie_names,
                "user_email": user_email,
                "l2_caching_enabled": l2_caching_enabled,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browser_cache_settings"]) -> MetaOapg.properties.browser_cache_settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browser_cache_settings_maximum_ttl"]) -> MetaOapg.properties.browser_cache_settings_maximum_ttl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cdn_cache_settings"]) -> MetaOapg.properties.cdn_cache_settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cdn_cache_settings_maximum_ttl"]) -> MetaOapg.properties.cdn_cache_settings_maximum_ttl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cache_by_query_string"]) -> MetaOapg.properties.cache_by_query_string: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["query_string_fields"]) -> MetaOapg.properties.query_string_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enable_query_string_sort"]) -> MetaOapg.properties.enable_query_string_sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cache_by_cookies"]) -> MetaOapg.properties.cache_by_cookies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cookie_names"]) -> MetaOapg.properties.cookie_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_email"]) -> MetaOapg.properties.user_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["l2_caching_enabled"]) -> MetaOapg.properties.l2_caching_enabled: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["browser_cache_settings"], typing_extensions.Literal["browser_cache_settings_maximum_ttl"], typing_extensions.Literal["cdn_cache_settings"], typing_extensions.Literal["cdn_cache_settings_maximum_ttl"], typing_extensions.Literal["cache_by_query_string"], typing_extensions.Literal["query_string_fields"], typing_extensions.Literal["enable_query_string_sort"], typing_extensions.Literal["cache_by_cookies"], typing_extensions.Literal["cookie_names"], typing_extensions.Literal["user_email"], typing_extensions.Literal["l2_caching_enabled"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browser_cache_settings"]) -> typing.Union[MetaOapg.properties.browser_cache_settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browser_cache_settings_maximum_ttl"]) -> typing.Union[MetaOapg.properties.browser_cache_settings_maximum_ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cdn_cache_settings"]) -> typing.Union[MetaOapg.properties.cdn_cache_settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cdn_cache_settings_maximum_ttl"]) -> typing.Union[MetaOapg.properties.cdn_cache_settings_maximum_ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cache_by_query_string"]) -> typing.Union[MetaOapg.properties.cache_by_query_string, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["query_string_fields"]) -> typing.Union[MetaOapg.properties.query_string_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enable_query_string_sort"]) -> typing.Union[MetaOapg.properties.enable_query_string_sort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cache_by_cookies"]) -> typing.Union[MetaOapg.properties.cache_by_cookies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cookie_names"]) -> typing.Union[MetaOapg.properties.cookie_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_email"]) -> typing.Union[MetaOapg.properties.user_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["l2_caching_enabled"]) -> typing.Union[MetaOapg.properties.l2_caching_enabled, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["browser_cache_settings"], typing_extensions.Literal["browser_cache_settings_maximum_ttl"], typing_extensions.Literal["cdn_cache_settings"], typing_extensions.Literal["cdn_cache_settings_maximum_ttl"], typing_extensions.Literal["cache_by_query_string"], typing_extensions.Literal["query_string_fields"], typing_extensions.Literal["enable_query_string_sort"], typing_extensions.Literal["cache_by_cookies"], typing_extensions.Literal["cookie_names"], typing_extensions.Literal["user_email"], typing_extensions.Literal["l2_caching_enabled"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        browser_cache_settings: typing.Union[MetaOapg.properties.browser_cache_settings, str, schemas.Unset] = schemas.unset,
        browser_cache_settings_maximum_ttl: typing.Union[MetaOapg.properties.browser_cache_settings_maximum_ttl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cdn_cache_settings: typing.Union[MetaOapg.properties.cdn_cache_settings, str, schemas.Unset] = schemas.unset,
        cdn_cache_settings_maximum_ttl: typing.Union[MetaOapg.properties.cdn_cache_settings_maximum_ttl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cache_by_query_string: typing.Union[MetaOapg.properties.cache_by_query_string, str, schemas.Unset] = schemas.unset,
        query_string_fields: typing.Union[MetaOapg.properties.query_string_fields, list, tuple, None, schemas.Unset] = schemas.unset,
        enable_query_string_sort: typing.Union[MetaOapg.properties.enable_query_string_sort, bool, schemas.Unset] = schemas.unset,
        cache_by_cookies: typing.Union[MetaOapg.properties.cache_by_cookies, str, schemas.Unset] = schemas.unset,
        cookie_names: typing.Union[MetaOapg.properties.cookie_names, list, tuple, None, schemas.Unset] = schemas.unset,
        user_email: typing.Union[MetaOapg.properties.user_email, str, schemas.Unset] = schemas.unset,
        l2_caching_enabled: typing.Union[MetaOapg.properties.l2_caching_enabled, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ApplicationCacheCreateRequest':
        return super().__new__(
            cls,
            *_args,
            name=name,
            browser_cache_settings=browser_cache_settings,
            browser_cache_settings_maximum_ttl=browser_cache_settings_maximum_ttl,
            cdn_cache_settings=cdn_cache_settings,
            cdn_cache_settings_maximum_ttl=cdn_cache_settings_maximum_ttl,
            cache_by_query_string=cache_by_query_string,
            query_string_fields=query_string_fields,
            enable_query_string_sort=enable_query_string_sort,
            cache_by_cookies=cache_by_cookies,
            cookie_names=cookie_names,
            user_email=user_email,
            l2_caching_enabled=l2_caching_enabled,
            _configuration=_configuration,
        )
