# coding: utf-8

"""
    Edge Application API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from edgeapplications import schemas  # noqa: F401


class ApplicationsResults(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "last_editor",
            "name",
            "active",
            "origins",
            "id",
            "debug_rules",
            "last_modified",
        }
        
        class properties:
            id = schemas.Int64Schema
            name = schemas.StrSchema
            debug_rules = schemas.BoolSchema
            last_editor = schemas.StrSchema
            last_modified = schemas.StrSchema
            active = schemas.BoolSchema
            
            
            class origins(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ApplicationOrigins']:
                        return ApplicationOrigins
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ApplicationOrigins'], typing.List['ApplicationOrigins']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'origins':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ApplicationOrigins':
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "name": name,
                "debug_rules": debug_rules,
                "last_editor": last_editor,
                "last_modified": last_modified,
                "active": active,
                "origins": origins,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    last_editor: MetaOapg.properties.last_editor
    name: MetaOapg.properties.name
    active: MetaOapg.properties.active
    origins: MetaOapg.properties.origins
    id: MetaOapg.properties.id
    debug_rules: MetaOapg.properties.debug_rules
    last_modified: MetaOapg.properties.last_modified
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_editor"]) -> MetaOapg.properties.last_editor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origins"]) -> MetaOapg.properties.origins: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debug_rules"]) -> MetaOapg.properties.debug_rules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["last_editor"], typing_extensions.Literal["name"], typing_extensions.Literal["active"], typing_extensions.Literal["origins"], typing_extensions.Literal["id"], typing_extensions.Literal["debug_rules"], typing_extensions.Literal["last_modified"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_editor"]) -> MetaOapg.properties.last_editor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origins"]) -> MetaOapg.properties.origins: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debug_rules"]) -> MetaOapg.properties.debug_rules: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["last_editor"], typing_extensions.Literal["name"], typing_extensions.Literal["active"], typing_extensions.Literal["origins"], typing_extensions.Literal["id"], typing_extensions.Literal["debug_rules"], typing_extensions.Literal["last_modified"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        last_editor: typing.Union[MetaOapg.properties.last_editor, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        origins: typing.Union[MetaOapg.properties.origins, list, tuple, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        debug_rules: typing.Union[MetaOapg.properties.debug_rules, bool, ],
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ApplicationsResults':
        return super().__new__(
            cls,
            *_args,
            last_editor=last_editor,
            name=name,
            active=active,
            origins=origins,
            id=id,
            debug_rules=debug_rules,
            last_modified=last_modified,
            _configuration=_configuration,
        )

from edgeapplications.model.application_origins import ApplicationOrigins
