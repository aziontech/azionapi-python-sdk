# coding: utf-8

"""
    Edge Application API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from edgeapplications import schemas  # noqa: F401


class CreateApplicationRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            application_acceleration = schemas.BoolSchema
            delivery_protocol = schemas.StrSchema
            origin_type = schemas.StrSchema
            address = schemas.StrSchema
            origin_protocol_policy = schemas.StrSchema
            host_header = schemas.StrSchema
            browser_cache_settings = schemas.StrSchema
            cdn_cache_settings = schemas.StrSchema
            browser_cache_settings_maximum_ttl = schemas.Int64Schema
            cdn_cache_settings_maximum_ttl = schemas.Int64Schema
            debug_rules = schemas.BoolSchema
            supported_ciphers = schemas.StrSchema
            http_port = schemas.AnyTypeSchema
            https_port = schemas.AnyTypeSchema
            l2_caching = schemas.BoolSchema
            http3 = schemas.BoolSchema
            websocket = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "application_acceleration": application_acceleration,
                "delivery_protocol": delivery_protocol,
                "origin_type": origin_type,
                "address": address,
                "origin_protocol_policy": origin_protocol_policy,
                "host_header": host_header,
                "browser_cache_settings": browser_cache_settings,
                "cdn_cache_settings": cdn_cache_settings,
                "browser_cache_settings_maximum_ttl": browser_cache_settings_maximum_ttl,
                "cdn_cache_settings_maximum_ttl": cdn_cache_settings_maximum_ttl,
                "debug_rules": debug_rules,
                "supported_ciphers": supported_ciphers,
                "http_port": http_port,
                "https_port": https_port,
                "l2_caching": l2_caching,
                "http3": http3,
                "websocket": websocket,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application_acceleration"]) -> MetaOapg.properties.application_acceleration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delivery_protocol"]) -> MetaOapg.properties.delivery_protocol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin_type"]) -> MetaOapg.properties.origin_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> MetaOapg.properties.address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin_protocol_policy"]) -> MetaOapg.properties.origin_protocol_policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["host_header"]) -> MetaOapg.properties.host_header: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browser_cache_settings"]) -> MetaOapg.properties.browser_cache_settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cdn_cache_settings"]) -> MetaOapg.properties.cdn_cache_settings: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browser_cache_settings_maximum_ttl"]) -> MetaOapg.properties.browser_cache_settings_maximum_ttl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cdn_cache_settings_maximum_ttl"]) -> MetaOapg.properties.cdn_cache_settings_maximum_ttl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debug_rules"]) -> MetaOapg.properties.debug_rules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supported_ciphers"]) -> MetaOapg.properties.supported_ciphers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["http_port"]) -> MetaOapg.properties.http_port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["https_port"]) -> MetaOapg.properties.https_port: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["l2_caching"]) -> MetaOapg.properties.l2_caching: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["http3"]) -> MetaOapg.properties.http3: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["websocket"]) -> MetaOapg.properties.websocket: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["application_acceleration"], typing_extensions.Literal["delivery_protocol"], typing_extensions.Literal["origin_type"], typing_extensions.Literal["address"], typing_extensions.Literal["origin_protocol_policy"], typing_extensions.Literal["host_header"], typing_extensions.Literal["browser_cache_settings"], typing_extensions.Literal["cdn_cache_settings"], typing_extensions.Literal["browser_cache_settings_maximum_ttl"], typing_extensions.Literal["cdn_cache_settings_maximum_ttl"], typing_extensions.Literal["debug_rules"], typing_extensions.Literal["supported_ciphers"], typing_extensions.Literal["http_port"], typing_extensions.Literal["https_port"], typing_extensions.Literal["l2_caching"], typing_extensions.Literal["http3"], typing_extensions.Literal["websocket"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application_acceleration"]) -> typing.Union[MetaOapg.properties.application_acceleration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delivery_protocol"]) -> typing.Union[MetaOapg.properties.delivery_protocol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin_type"]) -> typing.Union[MetaOapg.properties.origin_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union[MetaOapg.properties.address, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin_protocol_policy"]) -> typing.Union[MetaOapg.properties.origin_protocol_policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["host_header"]) -> typing.Union[MetaOapg.properties.host_header, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browser_cache_settings"]) -> typing.Union[MetaOapg.properties.browser_cache_settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cdn_cache_settings"]) -> typing.Union[MetaOapg.properties.cdn_cache_settings, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browser_cache_settings_maximum_ttl"]) -> typing.Union[MetaOapg.properties.browser_cache_settings_maximum_ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cdn_cache_settings_maximum_ttl"]) -> typing.Union[MetaOapg.properties.cdn_cache_settings_maximum_ttl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debug_rules"]) -> typing.Union[MetaOapg.properties.debug_rules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supported_ciphers"]) -> typing.Union[MetaOapg.properties.supported_ciphers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["http_port"]) -> typing.Union[MetaOapg.properties.http_port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["https_port"]) -> typing.Union[MetaOapg.properties.https_port, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["l2_caching"]) -> typing.Union[MetaOapg.properties.l2_caching, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["http3"]) -> typing.Union[MetaOapg.properties.http3, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["websocket"]) -> typing.Union[MetaOapg.properties.websocket, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["application_acceleration"], typing_extensions.Literal["delivery_protocol"], typing_extensions.Literal["origin_type"], typing_extensions.Literal["address"], typing_extensions.Literal["origin_protocol_policy"], typing_extensions.Literal["host_header"], typing_extensions.Literal["browser_cache_settings"], typing_extensions.Literal["cdn_cache_settings"], typing_extensions.Literal["browser_cache_settings_maximum_ttl"], typing_extensions.Literal["cdn_cache_settings_maximum_ttl"], typing_extensions.Literal["debug_rules"], typing_extensions.Literal["supported_ciphers"], typing_extensions.Literal["http_port"], typing_extensions.Literal["https_port"], typing_extensions.Literal["l2_caching"], typing_extensions.Literal["http3"], typing_extensions.Literal["websocket"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        application_acceleration: typing.Union[MetaOapg.properties.application_acceleration, bool, schemas.Unset] = schemas.unset,
        delivery_protocol: typing.Union[MetaOapg.properties.delivery_protocol, str, schemas.Unset] = schemas.unset,
        origin_type: typing.Union[MetaOapg.properties.origin_type, str, schemas.Unset] = schemas.unset,
        address: typing.Union[MetaOapg.properties.address, str, schemas.Unset] = schemas.unset,
        origin_protocol_policy: typing.Union[MetaOapg.properties.origin_protocol_policy, str, schemas.Unset] = schemas.unset,
        host_header: typing.Union[MetaOapg.properties.host_header, str, schemas.Unset] = schemas.unset,
        browser_cache_settings: typing.Union[MetaOapg.properties.browser_cache_settings, str, schemas.Unset] = schemas.unset,
        cdn_cache_settings: typing.Union[MetaOapg.properties.cdn_cache_settings, str, schemas.Unset] = schemas.unset,
        browser_cache_settings_maximum_ttl: typing.Union[MetaOapg.properties.browser_cache_settings_maximum_ttl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cdn_cache_settings_maximum_ttl: typing.Union[MetaOapg.properties.cdn_cache_settings_maximum_ttl, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        debug_rules: typing.Union[MetaOapg.properties.debug_rules, bool, schemas.Unset] = schemas.unset,
        supported_ciphers: typing.Union[MetaOapg.properties.supported_ciphers, str, schemas.Unset] = schemas.unset,
        http_port: typing.Union[MetaOapg.properties.http_port, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        https_port: typing.Union[MetaOapg.properties.https_port, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        l2_caching: typing.Union[MetaOapg.properties.l2_caching, bool, schemas.Unset] = schemas.unset,
        http3: typing.Union[MetaOapg.properties.http3, bool, schemas.Unset] = schemas.unset,
        websocket: typing.Union[MetaOapg.properties.websocket, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'CreateApplicationRequest':
        return super().__new__(
            cls,
            *_args,
            name=name,
            application_acceleration=application_acceleration,
            delivery_protocol=delivery_protocol,
            origin_type=origin_type,
            address=address,
            origin_protocol_policy=origin_protocol_policy,
            host_header=host_header,
            browser_cache_settings=browser_cache_settings,
            cdn_cache_settings=cdn_cache_settings,
            browser_cache_settings_maximum_ttl=browser_cache_settings_maximum_ttl,
            cdn_cache_settings_maximum_ttl=cdn_cache_settings_maximum_ttl,
            debug_rules=debug_rules,
            supported_ciphers=supported_ciphers,
            http_port=http_port,
            https_port=https_port,
            l2_caching=l2_caching,
            http3=http3,
            websocket=websocket,
            _configuration=_configuration,
        )
