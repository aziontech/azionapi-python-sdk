# coding: utf-8

"""
    Edge Firewall API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, conint, conlist
from edgefirewall.models.links import Links
from edgefirewall.models.rule_set_result_all import RuleSetResultAll

class RuleSetResponseAll(BaseModel):
    """
    RuleSetResponseAll
    """
    count: Optional[conint(strict=True, ge=0)] = None
    total_pages: Optional[conint(strict=True, ge=0)] = None
    schema_version: Optional[StrictInt] = 3
    links: Optional[Links] = None
    results: Optional[conlist(RuleSetResultAll)] = None
    __properties = ["count", "total_pages", "schema_version", "links", "results"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RuleSetResponseAll:
        """Create an instance of RuleSetResponseAll from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['results'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RuleSetResponseAll:
        """Create an instance of RuleSetResponseAll from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RuleSetResponseAll.parse_obj(obj)

        _obj = RuleSetResponseAll.parse_obj({
            "count": obj.get("count"),
            "total_pages": obj.get("total_pages"),
            "schema_version": obj.get("schema_version") if obj.get("schema_version") is not None else 3,
            "links": Links.from_dict(obj.get("links")) if obj.get("links") is not None else None,
            "results": [RuleSetResultAll.from_dict(_item) for _item in obj.get("results")] if obj.get("results") is not None else None
        })
        return _obj


