# coding: utf-8

"""
    Edge Firewall API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, conint, conlist
from edgefirewall.models.behaviors import Behaviors
from edgefirewall.models.ssl_verification_status_criteria import SSLVerificationStatusCriteria

class RuleSetResponse(BaseModel):
    """
    RuleSetResponse
    """
    name: Optional[StrictStr] = None
    is_active: Optional[StrictBool] = None
    behaviors: Optional[conlist(Behaviors)] = None
    criteria: Optional[conlist(conlist(SSLVerificationStatusCriteria))] = None
    last_modified: Optional[datetime] = None
    last_editor: Optional[StrictStr] = None
    id: Optional[conint(strict=True, ge=1)] = None
    order: Optional[conint(strict=True, ge=1)] = None
    __properties = ["name", "is_active", "behaviors", "criteria", "last_modified", "last_editor", "id", "order"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RuleSetResponse:
        """Create an instance of RuleSetResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in behaviors (list)
        _items = []
        if self.behaviors:
            for _item in self.behaviors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['behaviors'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in criteria (list of list)
        _items = []
        if self.criteria:
            for _item in self.criteria:
                if _item:
                    _items.append(
                         [_inner_item.to_dict() for _inner_item in _item if _inner_item is not None]
                    )
            _dict['criteria'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RuleSetResponse:
        """Create an instance of RuleSetResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RuleSetResponse.parse_obj(obj)

        _obj = RuleSetResponse.parse_obj({
            "name": obj.get("name"),
            "is_active": obj.get("is_active"),
            "behaviors": [Behaviors.from_dict(_item) for _item in obj.get("behaviors")] if obj.get("behaviors") is not None else None,
            "criteria": [
                    [SSLVerificationStatusCriteria.from_dict(_inner_item) for _inner_item in _item]
                    for _item in obj.get("criteria")
                ] if obj.get("criteria") is not None else None,
            "last_modified": obj.get("last_modified"),
            "last_editor": obj.get("last_editor"),
            "id": obj.get("id"),
            "order": obj.get("order")
        })
        return _obj


