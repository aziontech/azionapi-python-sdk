# coding: utf-8

"""
    Edge Firewall API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, validator
from edgefirewall.models.set_rate_limit_behavior_argument_average_rate_limit import SetRateLimitBehaviorArgumentAverageRateLimit

class SetRateLimitBehaviorArgument(BaseModel):
    """
    SetRateLimitBehaviorArgument
    """
    type: Optional[StrictStr] = None
    limit_by: Optional[StrictStr] = None
    average_rate_limit: Optional[SetRateLimitBehaviorArgumentAverageRateLimit] = None
    maximum_burst_size: Optional[SetRateLimitBehaviorArgumentAverageRateLimit] = None
    __properties = ["type", "limit_by", "average_rate_limit", "maximum_burst_size"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('second', 'minute'):
            raise ValueError("must be one of enum values ('second', 'minute')")
        return value

    @validator('limit_by')
    def limit_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('client_ip', 'global'):
            raise ValueError("must be one of enum values ('client_ip', 'global')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SetRateLimitBehaviorArgument:
        """Create an instance of SetRateLimitBehaviorArgument from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of average_rate_limit
        if self.average_rate_limit:
            _dict['average_rate_limit'] = self.average_rate_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of maximum_burst_size
        if self.maximum_burst_size:
            _dict['maximum_burst_size'] = self.maximum_burst_size.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SetRateLimitBehaviorArgument:
        """Create an instance of SetRateLimitBehaviorArgument from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SetRateLimitBehaviorArgument.parse_obj(obj)

        _obj = SetRateLimitBehaviorArgument.parse_obj({
            "type": obj.get("type"),
            "limit_by": obj.get("limit_by"),
            "average_rate_limit": SetRateLimitBehaviorArgumentAverageRateLimit.from_dict(obj.get("average_rate_limit")) if obj.get("average_rate_limit") is not None else None,
            "maximum_burst_size": SetRateLimitBehaviorArgumentAverageRateLimit.from_dict(obj.get("maximum_burst_size")) if obj.get("maximum_burst_size") is not None else None
        })
        return _obj


