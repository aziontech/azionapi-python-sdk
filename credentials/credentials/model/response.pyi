# coding: utf-8

"""
    Credentials API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from credentials import schemas  # noqa: F401


class Response(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "last_editor",
            "name",
            "description",
            "id",
            "last_modified",
            "status",
            "token",
        }
        
        class properties:
            description = schemas.StrSchema
            id = schemas.Int64Schema
            last_editor = schemas.StrSchema
            last_modified = schemas.DateTimeSchema
            name = schemas.StrSchema
            status = schemas.BoolSchema
            token = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "id": id,
                "last_editor": last_editor,
                "last_modified": last_modified,
                "name": name,
                "status": status,
                "token": token,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    last_editor: MetaOapg.properties.last_editor
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    last_modified: MetaOapg.properties.last_modified
    status: MetaOapg.properties.status
    token: MetaOapg.properties.token
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_editor"]) -> MetaOapg.properties.last_editor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["last_editor"], typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["id"], typing_extensions.Literal["last_modified"], typing_extensions.Literal["status"], typing_extensions.Literal["token"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_editor"]) -> MetaOapg.properties.last_editor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_modified"]) -> MetaOapg.properties.last_modified: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["last_editor"], typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["id"], typing_extensions.Literal["last_modified"], typing_extensions.Literal["status"], typing_extensions.Literal["token"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        last_editor: typing.Union[MetaOapg.properties.last_editor, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        last_modified: typing.Union[MetaOapg.properties.last_modified, str, datetime, ],
        status: typing.Union[MetaOapg.properties.status, bool, ],
        token: typing.Union[MetaOapg.properties.token, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'Response':
        return super().__new__(
            cls,
            *_args,
            last_editor=last_editor,
            name=name,
            description=description,
            id=id,
            last_modified=last_modified,
            status=status,
            token=token,
            _configuration=_configuration,
        )
