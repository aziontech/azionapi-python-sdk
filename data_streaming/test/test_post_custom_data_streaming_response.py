# coding: utf-8

"""
    Data Streaming - OpenAPI

    The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import data_streaming
from data_streaming.models.post_custom_data_streaming_response import PostCustomDataStreamingResponse  # noqa: E501
from data_streaming.rest import ApiException

class TestPostCustomDataStreamingResponse(unittest.TestCase):
    """PostCustomDataStreamingResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test PostCustomDataStreamingResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostCustomDataStreamingResponse`
        """
        model = data_streaming.models.post_custom_data_streaming_response.PostCustomDataStreamingResponse()  # noqa: E501
        if include_optional :
            return PostCustomDataStreamingResponse(
                id = 56, 
                name = '', 
                data_source = 'http', 
                template_model = '"{\"custom_template_field\":\"$custom_value\", \"status\":\"$status\"}"
 
', 
                active = True, 
                endpoint = '', 
                all_domains = True
            )
        else :
            return PostCustomDataStreamingResponse(
        )
        """

    def testPostCustomDataStreamingResponse(self):
        """Test PostCustomDataStreamingResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
