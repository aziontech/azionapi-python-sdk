# coding: utf-8

"""
    Data Streaming - OpenAPI

    The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator

class CustomDataStreamingPostBody(BaseModel):
    """
    CustomDataStreamingPostBody
    """
    name: Optional[StrictStr] = None
    data_source: Optional[StrictStr] = Field(None, description="Options:  * `http` - Edge Applications (default)  * `waf` - WAF Events  * `cells_console` - Edge Functions  * `rtm_activity` - Activity History   ")
    template_model: Optional[StrictStr] = Field(None, description="Note:  * Add all variables and values that will be used to stream according to the data source you choose to use.    * All data streaming [variables can be found on the reference documentation](https://www.azion.com/en/documentation/products/data-streaming/#selecting-data-sources).   ")
    active: Optional[StrictBool] = True
    __properties = ["name", "data_source", "template_model", "active"]

    @validator('data_source')
    def data_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('http', 'waf', 'cells_console', 'rtm_activity'):
            raise ValueError("must be one of enum values ('http', 'waf', 'cells_console', 'rtm_activity')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomDataStreamingPostBody:
        """Create an instance of CustomDataStreamingPostBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if data_source (nullable) is None
        # and __fields_set__ contains the field
        if self.data_source is None and "data_source" in self.__fields_set__:
            _dict['data_source'] = None

        # set to None if active (nullable) is None
        # and __fields_set__ contains the field
        if self.active is None and "active" in self.__fields_set__:
            _dict['active'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomDataStreamingPostBody:
        """Create an instance of CustomDataStreamingPostBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomDataStreamingPostBody.parse_obj(obj)

        _obj = CustomDataStreamingPostBody.parse_obj({
            "name": obj.get("name"),
            "data_source": obj.get("data_source"),
            "template_model": obj.get("template_model"),
            "active": obj.get("active") if obj.get("active") is not None else True
        })
        return _obj


