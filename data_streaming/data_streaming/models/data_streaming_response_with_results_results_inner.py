# coding: utf-8

"""
    Data Streaming - OpenAPI

    The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from data_streaming.models.data_streaming_response_get_result_type_custom import DataStreamingResponseGetResultTypeCustom
from data_streaming.models.data_streaming_response_get_result_type_datadog_dts import DataStreamingResponseGetResultTypeDatadogDTS
from data_streaming.models.data_streaming_response_get_result_type_kafka import DataStreamingResponseGetResultTypeKafka
from data_streaming.models.data_streaming_response_get_result_type_standard import DataStreamingResponseGetResultTypeStandard
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

DATASTREAMINGRESPONSEWITHRESULTSRESULTSINNER_ANY_OF_SCHEMAS = ["DataStreamingResponseGetResultTypeCustom", "DataStreamingResponseGetResultTypeDatadogDTS", "DataStreamingResponseGetResultTypeKafka", "DataStreamingResponseGetResultTypeStandard"]

class DataStreamingResponseWithResultsResultsInner(BaseModel):
    """
    DataStreamingResponseWithResultsResultsInner
    """

    # data type: DataStreamingResponseGetResultTypeDatadogDTS
    anyof_schema_1_validator: Optional[DataStreamingResponseGetResultTypeDatadogDTS] = None
    # data type: DataStreamingResponseGetResultTypeKafka
    anyof_schema_2_validator: Optional[DataStreamingResponseGetResultTypeKafka] = None
    # data type: DataStreamingResponseGetResultTypeStandard
    anyof_schema_3_validator: Optional[DataStreamingResponseGetResultTypeStandard] = None
    # data type: DataStreamingResponseGetResultTypeCustom
    anyof_schema_4_validator: Optional[DataStreamingResponseGetResultTypeCustom] = None
    if TYPE_CHECKING:
        actual_instance: Union[DataStreamingResponseGetResultTypeCustom, DataStreamingResponseGetResultTypeDatadogDTS, DataStreamingResponseGetResultTypeKafka, DataStreamingResponseGetResultTypeStandard]
    else:
        actual_instance: Any
    any_of_schemas: List[str] = Field(DATASTREAMINGRESPONSEWITHRESULTSRESULTSINNER_ANY_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs):
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = DataStreamingResponseWithResultsResultsInner.construct()
        error_messages = []
        # validate data type: DataStreamingResponseGetResultTypeDatadogDTS
        if not isinstance(v, DataStreamingResponseGetResultTypeDatadogDTS):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DataStreamingResponseGetResultTypeDatadogDTS`")
        else:
            return v

        # validate data type: DataStreamingResponseGetResultTypeKafka
        if not isinstance(v, DataStreamingResponseGetResultTypeKafka):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DataStreamingResponseGetResultTypeKafka`")
        else:
            return v

        # validate data type: DataStreamingResponseGetResultTypeStandard
        if not isinstance(v, DataStreamingResponseGetResultTypeStandard):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DataStreamingResponseGetResultTypeStandard`")
        else:
            return v

        # validate data type: DataStreamingResponseGetResultTypeCustom
        if not isinstance(v, DataStreamingResponseGetResultTypeCustom):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DataStreamingResponseGetResultTypeCustom`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in DataStreamingResponseWithResultsResultsInner with anyOf schemas: DataStreamingResponseGetResultTypeCustom, DataStreamingResponseGetResultTypeDatadogDTS, DataStreamingResponseGetResultTypeKafka, DataStreamingResponseGetResultTypeStandard. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> DataStreamingResponseWithResultsResultsInner:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> DataStreamingResponseWithResultsResultsInner:
        """Returns the object represented by the json string"""
        instance = DataStreamingResponseWithResultsResultsInner.construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[DataStreamingResponseGetResultTypeDatadogDTS] = None
        try:
            instance.actual_instance = DataStreamingResponseGetResultTypeDatadogDTS.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[DataStreamingResponseGetResultTypeKafka] = None
        try:
            instance.actual_instance = DataStreamingResponseGetResultTypeKafka.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[DataStreamingResponseGetResultTypeStandard] = None
        try:
            instance.actual_instance = DataStreamingResponseGetResultTypeStandard.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[DataStreamingResponseGetResultTypeCustom] = None
        try:
            instance.actual_instance = DataStreamingResponseGetResultTypeCustom.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into DataStreamingResponseWithResultsResultsInner with anyOf schemas: DataStreamingResponseGetResultTypeCustom, DataStreamingResponseGetResultTypeDatadogDTS, DataStreamingResponseGetResultTypeKafka, DataStreamingResponseGetResultTypeStandard. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_dict()
        else:
            return json.dumps(self.actual_instance)

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


