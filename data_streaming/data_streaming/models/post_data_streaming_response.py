# coding: utf-8

"""
    Data Streaming - OpenAPI

    The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from data_streaming.models.post_data_streaming_response_endpoint_inner import PostDataStreamingResponseEndpointInner

class PostDataStreamingResponse(BaseModel):
    """
    PostDataStreamingResponse
    """
    id: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    template_id: Optional[StrictInt] = Field(None, description="Options:  * `2` - Edge Applications Event Collector  * `4` - WAF Event Collector  * `86` - Edge Functions Event Collector  * `184` - Edge Applications + WAF Event Collector  * `251` - Activity History Collector ")
    data_source: Optional[StrictStr] = Field(None, description="Options:  * `http` - Edge Applications  * `waf` - WAF Events  * `cells_console` - Edge Functions  * `rtm_activity` - Activity History ")
    active: Optional[StrictBool] = None
    endpoint: Optional[conlist(PostDataStreamingResponseEndpointInner)] = None
    all_domains: Optional[StrictBool] = Field(None, description="Note:  * Field not used with the rtm_activity data source. ")
    __properties = ["id", "name", "template_id", "data_source", "active", "endpoint", "all_domains"]

    @validator('template_id')
    def template_id_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (2, 4, 86, 184, 251):
            raise ValueError("must be one of enum values (2, 4, 86, 184, 251)")
        return value

    @validator('data_source')
    def data_source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('http', 'waf', 'cells_console', 'rtm_activity'):
            raise ValueError("must be one of enum values ('http', 'waf', 'cells_console', 'rtm_activity')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostDataStreamingResponse:
        """Create an instance of PostDataStreamingResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in endpoint (list)
        _items = []
        if self.endpoint:
            for _item in self.endpoint:
                if _item:
                    _items.append(_item.to_dict())
            _dict['endpoint'] = _items
        # set to None if all_domains (nullable) is None
        # and __fields_set__ contains the field
        if self.all_domains is None and "all_domains" in self.__fields_set__:
            _dict['all_domains'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostDataStreamingResponse:
        """Create an instance of PostDataStreamingResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostDataStreamingResponse.parse_obj(obj)

        _obj = PostDataStreamingResponse.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "template_id": obj.get("template_id"),
            "data_source": obj.get("data_source"),
            "active": obj.get("active"),
            "endpoint": [PostDataStreamingResponseEndpointInner.from_dict(_item) for _item in obj.get("endpoint")] if obj.get("endpoint") is not None else None,
            "all_domains": obj.get("all_domains")
        })
        return _obj


