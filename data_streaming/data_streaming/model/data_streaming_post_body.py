# coding: utf-8

"""
    Data Streaming - OpenAPI

    The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from data_streaming import schemas  # noqa: F401


class DataStreamingPostBody(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            
            
            class template_id(
                schemas.EnumBase,
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        2: "POSITIVE_2",
                        4: "POSITIVE_4",
                        86: "POSITIVE_86",
                        184: "POSITIVE_184",
                        251: "POSITIVE_251",
                    }
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_86(cls):
                    return cls(86)
                
                @schemas.classproperty
                def POSITIVE_184(cls):
                    return cls(184)
                
                @schemas.classproperty
                def POSITIVE_251(cls):
                    return cls(251)
            
            
            class data_source(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "http": "HTTP",
                        "waf": "WAF",
                        "cells_console": "CELLS_CONSOLE",
                        "rtm_activity": "RTM_ACTIVITY",
                    }
                
                @schemas.classproperty
                def HTTP(cls):
                    return cls("http")
                
                @schemas.classproperty
                def WAF(cls):
                    return cls("waf")
                
                @schemas.classproperty
                def CELLS_CONSOLE(cls):
                    return cls("cells_console")
                
                @schemas.classproperty
                def RTM_ACTIVITY(cls):
                    return cls("rtm_activity")
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data_source':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class active(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'active':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            endpoint = schemas.StrSchema
            
            
            class domains_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    min_items = 1
                    items = schemas.IntSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'domains_ids':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class all_domains(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'all_domains':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sampling_percentage(
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 100
                    inclusive_minimum = 0
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sampling_percentage':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "name": name,
                "template_id": template_id,
                "data_source": data_source,
                "active": active,
                "endpoint": endpoint,
                "domains_ids": domains_ids,
                "all_domains": all_domains,
                "sampling_percentage": sampling_percentage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template_id"]) -> MetaOapg.properties.template_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_source"]) -> MetaOapg.properties.data_source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpoint"]) -> MetaOapg.properties.endpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domains_ids"]) -> MetaOapg.properties.domains_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["all_domains"]) -> MetaOapg.properties.all_domains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sampling_percentage"]) -> MetaOapg.properties.sampling_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "template_id", "data_source", "active", "endpoint", "domains_ids", "all_domains", "sampling_percentage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template_id"]) -> typing.Union[MetaOapg.properties.template_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_source"]) -> typing.Union[MetaOapg.properties.data_source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpoint"]) -> typing.Union[MetaOapg.properties.endpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domains_ids"]) -> typing.Union[MetaOapg.properties.domains_ids, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["all_domains"]) -> typing.Union[MetaOapg.properties.all_domains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sampling_percentage"]) -> typing.Union[MetaOapg.properties.sampling_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "template_id", "data_source", "active", "endpoint", "domains_ids", "all_domains", "sampling_percentage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        template_id: typing.Union[MetaOapg.properties.template_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        data_source: typing.Union[MetaOapg.properties.data_source, None, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, None, bool, schemas.Unset] = schemas.unset,
        endpoint: typing.Union[MetaOapg.properties.endpoint, str, schemas.Unset] = schemas.unset,
        domains_ids: typing.Union[MetaOapg.properties.domains_ids, list, tuple, schemas.Unset] = schemas.unset,
        all_domains: typing.Union[MetaOapg.properties.all_domains, None, bool, schemas.Unset] = schemas.unset,
        sampling_percentage: typing.Union[MetaOapg.properties.sampling_percentage, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DataStreamingPostBody':
        return super().__new__(
            cls,
            *_args,
            name=name,
            template_id=template_id,
            data_source=data_source,
            active=active,
            endpoint=endpoint,
            domains_ids=domains_ids,
            all_domains=all_domains,
            sampling_percentage=sampling_percentage,
            _configuration=_configuration,
            **kwargs,
        )
