# coding: utf-8

"""
    Data Streaming - OpenAPI

    The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from data_streaming import schemas  # noqa: F401


class EndpointAWSKinesisFirehose(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            endpoint_type = schemas.StrSchema
            access_key = schemas.StrSchema
            stream_name = schemas.StrSchema
            region = schemas.StrSchema
            secret_key = schemas.StrSchema
            __annotations__ = {
                "endpoint_type": endpoint_type,
                "access_key": access_key,
                "stream_name": stream_name,
                "region": region,
                "secret_key": secret_key,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpoint_type"]) -> MetaOapg.properties.endpoint_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_key"]) -> MetaOapg.properties.access_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_name"]) -> MetaOapg.properties.stream_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> MetaOapg.properties.region: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secret_key"]) -> MetaOapg.properties.secret_key: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["endpoint_type", "access_key", "stream_name", "region", "secret_key", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpoint_type"]) -> typing.Union[MetaOapg.properties.endpoint_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_key"]) -> typing.Union[MetaOapg.properties.access_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_name"]) -> typing.Union[MetaOapg.properties.stream_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union[MetaOapg.properties.region, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secret_key"]) -> typing.Union[MetaOapg.properties.secret_key, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["endpoint_type", "access_key", "stream_name", "region", "secret_key", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        endpoint_type: typing.Union[MetaOapg.properties.endpoint_type, str, schemas.Unset] = schemas.unset,
        access_key: typing.Union[MetaOapg.properties.access_key, str, schemas.Unset] = schemas.unset,
        stream_name: typing.Union[MetaOapg.properties.stream_name, str, schemas.Unset] = schemas.unset,
        region: typing.Union[MetaOapg.properties.region, str, schemas.Unset] = schemas.unset,
        secret_key: typing.Union[MetaOapg.properties.secret_key, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EndpointAWSKinesisFirehose':
        return super().__new__(
            cls,
            *_args,
            endpoint_type=endpoint_type,
            access_key=access_key,
            stream_name=stream_name,
            region=region,
            secret_key=secret_key,
            _configuration=_configuration,
            **kwargs,
        )
