# coding: utf-8

"""
    Data Streaming - OpenAPI

    The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from data_streaming import schemas  # noqa: F401


class PostDataStreamingResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.IntSchema
            name = schemas.StrSchema
            
            
            class template_id(
                schemas.EnumBase,
                schemas.IntSchema
            ):
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls(2)
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls(4)
                
                @schemas.classproperty
                def POSITIVE_86(cls):
                    return cls(86)
                
                @schemas.classproperty
                def POSITIVE_184(cls):
                    return cls(184)
                
                @schemas.classproperty
                def POSITIVE_251(cls):
                    return cls(251)
            
            
            class data_source(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def HTTP(cls):
                    return cls("http")
                
                @schemas.classproperty
                def WAF(cls):
                    return cls("waf")
                
                @schemas.classproperty
                def CELLS_CONSOLE(cls):
                    return cls("cells_console")
                
                @schemas.classproperty
                def RTM_ACTIVITY(cls):
                    return cls("rtm_activity")
            active = schemas.BoolSchema
            
            
            class endpoint(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            @classmethod
                            @functools.lru_cache()
                            def one_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    EndpointDefault,
                                    EndpointKafka,
                                    EndpoinrtS3,
                                    EndpointGoogleBigQuery,
                                    EndpointElasticsearch,
                                    EndpointAWSKinesisFirehose,
                                    EndpointDatadog,
                                    EndpointIBMQRadar,
                                    EndpointAzureMonitor,
                                    EndpointAzureBlobStorage,
                                    EndpointSplunk,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'endpoint':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class all_domains(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'all_domains':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "id": id,
                "name": name,
                "template_id": template_id,
                "data_source": data_source,
                "active": active,
                "endpoint": endpoint,
                "all_domains": all_domains,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template_id"]) -> MetaOapg.properties.template_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_source"]) -> MetaOapg.properties.data_source: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endpoint"]) -> MetaOapg.properties.endpoint: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["all_domains"]) -> MetaOapg.properties.all_domains: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "template_id", "data_source", "active", "endpoint", "all_domains", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template_id"]) -> typing.Union[MetaOapg.properties.template_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_source"]) -> typing.Union[MetaOapg.properties.data_source, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endpoint"]) -> typing.Union[MetaOapg.properties.endpoint, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["all_domains"]) -> typing.Union[MetaOapg.properties.all_domains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "template_id", "data_source", "active", "endpoint", "all_domains", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        template_id: typing.Union[MetaOapg.properties.template_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        data_source: typing.Union[MetaOapg.properties.data_source, str, schemas.Unset] = schemas.unset,
        active: typing.Union[MetaOapg.properties.active, bool, schemas.Unset] = schemas.unset,
        endpoint: typing.Union[MetaOapg.properties.endpoint, list, tuple, schemas.Unset] = schemas.unset,
        all_domains: typing.Union[MetaOapg.properties.all_domains, None, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PostDataStreamingResponse':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            template_id=template_id,
            data_source=data_source,
            active=active,
            endpoint=endpoint,
            all_domains=all_domains,
            _configuration=_configuration,
            **kwargs,
        )

from data_streaming.model.endpoinrt_s3 import EndpoinrtS3
from data_streaming.model.endpoint_aws_kinesis_firehose import EndpointAWSKinesisFirehose
from data_streaming.model.endpoint_azure_blob_storage import EndpointAzureBlobStorage
from data_streaming.model.endpoint_azure_monitor import EndpointAzureMonitor
from data_streaming.model.endpoint_datadog import EndpointDatadog
from data_streaming.model.endpoint_default import EndpointDefault
from data_streaming.model.endpoint_elasticsearch import EndpointElasticsearch
from data_streaming.model.endpoint_google_big_query import EndpointGoogleBigQuery
from data_streaming.model.endpoint_ibmq_radar import EndpointIBMQRadar
from data_streaming.model.endpoint_kafka import EndpointKafka
from data_streaming.model.endpoint_splunk import EndpointSplunk
